#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def getChatRoomAnnouncementsBulk(self, chatRoomMids):
        """
        Parameters:
         - chatRoomMids
        """
        pass

    def getChatRoomAnnouncements(self, chatRoomMid):
        """
        Parameters:
         - chatRoomMid
        """
        pass

    def createChatRoomAnnouncement(self, reqSeq, chatRoomMid, type, contents):
        """
        Parameters:
         - reqSeq
         - chatRoomMid
         - type
         - contents
        """
        pass

    def removeChatRoomAnnouncement(self, reqSeq, chatRoomMid, announcementSeq):
        """
        Parameters:
         - reqSeq
         - chatRoomMid
         - announcementSeq
        """
        pass

    def unsendMessage(self, seq, messageId):
        """
        Parameters:
         - seq
         - messageId
        """
        pass

    def getGroupWithoutMembers(self, groupId):
        """
        Parameters:
         - groupId
        """
        pass

    def requestResendMessage(self, reqSeq, senderMid, messageId):
        """
        Parameters:
         - reqSeq
         - senderMid
         - messageId
        """
        pass

    def respondResendMessage(self, reqSeq, receiverMid, originalMessageId, resendMessage, errorCode):
        """
        Parameters:
         - reqSeq
         - receiverMid
         - originalMessageId
         - resendMessage
         - errorCode
        """
        pass

    def acceptGroupInvitation(self, reqSeq, groupId):
        """
        Parameters:
         - reqSeq
         - groupId
        """
        pass

    def acceptGroupInvitationByTicket(self, reqSeq, GroupMid, ticketId):
        """
        Parameters:
         - reqSeq
         - GroupMid
         - ticketId
        """
        pass

    def acceptProximityMatches(self, sessionId, ids):
        """
        Parameters:
         - sessionId
         - ids
        """
        pass

    def acquireCallRoute(self, to):
        """
        Parameters:
         - to
        """
        pass

    def acquireCallTicket(self, to):
        """
        Parameters:
         - to
        """
        pass

    def acquireEncryptedAccessToken(self, featureType):
        """
        Parameters:
         - featureType
        """
        pass

    def addSnsId(self, snsIdType, snsAccessToken):
        """
        Parameters:
         - snsIdType
         - snsAccessToken
        """
        pass

    def blockContact(self, reqSeq, id):
        """
        Parameters:
         - reqSeq
         - id
        """
        pass

    def blockRecommendation(self, reqSeq, id):
        """
        Parameters:
         - reqSeq
         - id
        """
        pass

    def cancelGroupInvitation(self, reqSeq, groupId, contactIds):
        """
        Parameters:
         - reqSeq
         - groupId
         - contactIds
        """
        pass

    def changeVerificationMethod(self, sessionId, method):
        """
        Parameters:
         - sessionId
         - method
        """
        pass

    def clearIdentityCredential(self):
        pass

    def clearMessageBox(self, channelId, messageBoxId):
        """
        Parameters:
         - channelId
         - messageBoxId
        """
        pass

    def closeProximityMatch(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        pass

    def commitSendMessage(self, seq, messageId, receiverMids):
        """
        Parameters:
         - seq
         - messageId
         - receiverMids
        """
        pass

    def commitSendMessages(self, seq, messageIds, receiverMids):
        """
        Parameters:
         - seq
         - messageIds
         - receiverMids
        """
        pass

    def commitUpdateProfile(self, seq, attrs, receiverMids):
        """
        Parameters:
         - seq
         - attrs
         - receiverMids
        """
        pass

    def confirmEmail(self, verifier, pinCode):
        """
        Parameters:
         - verifier
         - pinCode
        """
        pass

    def createGroup(self, seq, name, contactIds):
        """
        Parameters:
         - seq
         - name
         - contactIds
        """
        pass

    def createQrcodeBase64Image(self, url, characterSet, imageSize, x, y, width, height):
        """
        Parameters:
         - url
         - characterSet
         - imageSize
         - x
         - y
         - width
         - height
        """
        pass

    def createRoom(self, reqSeq, contactIds):
        """
        Parameters:
         - reqSeq
         - contactIds
        """
        pass

    def createSession(self):
        pass

    def fetchAnnouncements(self, lastFetchedIndex):
        """
        Parameters:
         - lastFetchedIndex
        """
        pass

    def fetchMessages(self, localTs, count):
        """
        Parameters:
         - localTs
         - count
        """
        pass

    def fetchOperations(self, localRev, count):
        """
        Parameters:
         - localRev
         - count
        """
        pass

    def fetchOps(self, localRev, count, globalRev, individualRev):
        """
        Parameters:
         - localRev
         - count
         - globalRev
         - individualRev
        """
        pass

    def findAndAddContactsByEmail(self, reqSeq, emails):
        """
        Parameters:
         - reqSeq
         - emails
        """
        pass

    def findAndAddContactsByMid(self, reqSeq, mid, type, reference):
        """
        Parameters:
         - reqSeq
         - mid
         - type
         - reference
        """
        pass

    def findGroupByTicketV2(self, ticketId):
        """
        Parameters:
         - ticketId
        """
        pass

    def findAndAddContactsByPhone(self, reqSeq, phones):
        """
        Parameters:
         - reqSeq
         - phones
        """
        pass

    def getFriendRequests(self, direction, lastSeenSeqId):
        """
        Parameters:
         - direction
         - lastSeenSeqId
        """
        pass

    def removeFriendRequest(self, direction, midOrEMid):
        """
        Parameters:
         - direction
         - midOrEMid
        """
        pass

    def findAndAddContactsByUserid(self, reqSeq, userid):
        """
        Parameters:
         - reqSeq
         - userid
        """
        pass

    def findContactByUserid(self, userid):
        """
        Parameters:
         - userid
        """
        pass

    def findContactByUserTicket(self, ticketIdWithTag):
        """
        Parameters:
         - ticketIdWithTag
        """
        pass

    def findContactsByEmail(self, emails):
        """
        Parameters:
         - emails
        """
        pass

    def findContactsByPhone(self, phones):
        """
        Parameters:
         - phones
        """
        pass

    def findSnsIdUserStatus(self, snsIdType, snsAccessToken, udidHash):
        """
        Parameters:
         - snsIdType
         - snsAccessToken
         - udidHash
        """
        pass

    def finishUpdateVerification(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        pass

    def generateUserTicket(self, expirationTime, maxUseCount):
        """
        Parameters:
         - expirationTime
         - maxUseCount
        """
        pass

    def destroyMessage(self, seq, chatId, messageId, sessionId):
        """
        Parameters:
         - seq
         - chatId
         - messageId
         - sessionId
        """
        pass

    def getAcceptedProximityMatches(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        pass

    def getActiveBuddySubscriberIds(self):
        pass

    def getAllContactIds(self):
        pass

    def getAuthQrcode(self, keepLoggedIn, systemName):
        """
        Parameters:
         - keepLoggedIn
         - systemName
        """
        pass

    def getBlockedContactIds(self):
        pass

    def registerWithPhoneNumber(self, sessionId, migrationPincodeSessionId):
        """
        Parameters:
         - sessionId
         - migrationPincodeSessionId
        """
        pass

    def registerWithPhoneNumberAndPassword(self, sessionId, keynm, encrypted):
        """
        Parameters:
         - sessionId
         - keynm
         - encrypted
        """
        pass

    def getAnalyticsInfo(self):
        pass

    def reportClientStatistics(self, reqSeq, category, count):
        """
        Parameters:
         - reqSeq
         - category
         - count
        """
        pass

    def verifyPhoneNumberForLogin(self, verifierFromPhone, pinCodeForPhone, verifierFromLogin):
        """
        Parameters:
         - verifierFromPhone
         - pinCodeForPhone
         - verifierFromLogin
        """
        pass

    def verifyPhoneNumber(self, sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash):
        """
        Parameters:
         - sessionId
         - pinCode
         - udidHash
         - migrationPincodeSessionId
         - oldUdidHash
        """
        pass

    def getBlockedContactIdsByRange(self, start, count):
        """
        Parameters:
         - start
         - count
        """
        pass

    def getBlockedRecommendationIds(self):
        pass

    def getBuddyBlockerIds(self):
        pass

    def getBuddyLocation(self, mid, index):
        """
        Parameters:
         - mid
         - index
        """
        pass

    def getCompactContactsModifiedSince(self, timestamp):
        """
        Parameters:
         - timestamp
        """
        pass

    def getCompactGroup(self, groupId):
        """
        Parameters:
         - groupId
        """
        pass

    def getCompactRoom(self, roomId):
        """
        Parameters:
         - roomId
        """
        pass

    def getContact(self, id):
        """
        Parameters:
         - id
        """
        pass

    def getContacts(self, ids):
        """
        Parameters:
         - ids
        """
        pass

    def getContactWithFriendRequestStatus(self, id):
        """
        Parameters:
         - id
        """
        pass

    def getCountryWithRequestIp(self):
        pass

    def getFavoriteMids(self):
        pass

    def getGroup(self, groupId):
        """
        Parameters:
         - groupId
        """
        pass

    def getGroupIdsInvited(self):
        pass

    def getGroupIdsJoined(self):
        pass

    def getGroups(self, groupIds):
        """
        Parameters:
         - groupIds
        """
        pass

    def getHiddenContactMids(self):
        pass

    def getIdentityIdentifier(self):
        pass

    def getLastAnnouncementIndex(self):
        pass

    def getLastOpRevision(self):
        pass

    def getSuggestRevisions(self):
        pass

    def getPreviousMessagesV2WithReadCount(self, messageBoxId, endMessageId, messagesCount):
        """
        Parameters:
         - messageBoxId
         - endMessageId
         - messagesCount
        """
        pass

    def getMessageBox(self, channelId, messageBoxId, lastMessagesCount):
        """
        Parameters:
         - channelId
         - messageBoxId
         - lastMessagesCount
        """
        pass

    def getMessageBoxCompactWrapUp(self, mid):
        """
        Parameters:
         - mid
        """
        pass

    def getMessageBoxCompactWrapUpList(self, start, messageBoxCount):
        """
        Parameters:
         - start
         - messageBoxCount
        """
        pass

    def getMessageBoxList(self, channelId, lastMessagesCount):
        """
        Parameters:
         - channelId
         - lastMessagesCount
        """
        pass

    def getMessageBoxListByStatus(self, channelId, lastMessagesCount, status):
        """
        Parameters:
         - channelId
         - lastMessagesCount
         - status
        """
        pass

    def getMessageBoxWrapUp(self, mid):
        """
        Parameters:
         - mid
        """
        pass

    def getMessageBoxWrapUpList(self, start, messageBoxCount):
        """
        Parameters:
         - start
         - messageBoxCount
        """
        pass

    def getMessagesBySequenceNumber(self, channelId, messageBoxId, startSeq, endSeq):
        """
        Parameters:
         - channelId
         - messageBoxId
         - startSeq
         - endSeq
        """
        pass

    def getNextMessages(self, messageBoxId, startSeq, messagesCount):
        """
        Parameters:
         - messageBoxId
         - startSeq
         - messagesCount
        """
        pass

    def getNotificationPolicy(self, carrier):
        """
        Parameters:
         - carrier
        """
        pass

    def getPreviousMessages(self, messageBoxId, endSeq, messagesCount):
        """
        Parameters:
         - messageBoxId
         - endSeq
         - messagesCount
        """
        pass

    def getProfile(self):
        pass

    def getProximityMatchCandidateList(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        pass

    def getProximityMatchCandidates(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        pass

    def getRecentMessages(self, messageBoxId, messagesCount):
        """
        Parameters:
         - messageBoxId
         - messagesCount
        """
        pass

    def getRecommendationIds(self):
        pass

    def getRoom(self, roomId):
        """
        Parameters:
         - roomId
        """
        pass

    def getRSAKeyInfo(self, provider):
        """
        Parameters:
         - provider
        """
        pass

    def getServerTime(self):
        pass

    def getSessions(self):
        pass

    def getSettings(self):
        pass

    def getGroupsV2(self, groupIds):
        """
        Parameters:
         - groupIds
        """
        pass

    def getSettingsAttributes(self, attrBitset):
        """
        Parameters:
         - attrBitset
        """
        pass

    def getSystemConfiguration(self):
        pass

    def getUserTicket(self):
        pass

    def getWapInvitation(self, invitationHash):
        """
        Parameters:
         - invitationHash
        """
        pass

    def invalidateUserTicket(self):
        pass

    def inviteFriendsBySms(self, phoneNumberList):
        """
        Parameters:
         - phoneNumberList
        """
        pass

    def inviteIntoGroup(self, reqSeq, groupId, contactIds):
        """
        Parameters:
         - reqSeq
         - groupId
         - contactIds
        """
        pass

    def inviteIntoRoom(self, reqSeq, roomId, contactIds):
        """
        Parameters:
         - reqSeq
         - roomId
         - contactIds
        """
        pass

    def inviteViaEmail(self, reqSeq, email, name):
        """
        Parameters:
         - reqSeq
         - email
         - name
        """
        pass

    def isIdentityIdentifierAvailable(self, provider, identifier):
        """
        Parameters:
         - provider
         - identifier
        """
        pass

    def isUseridAvailable(self, userid):
        """
        Parameters:
         - userid
        """
        pass

    def kickoutFromGroup(self, reqSeq, groupId, contactIds):
        """
        Parameters:
         - reqSeq
         - groupId
         - contactIds
        """
        pass

    def reissueGroupTicket(self, groupMid):
        """
        Parameters:
         - groupMid
        """
        pass

    def findGroupByTicket(self, ticketId):
        """
        Parameters:
         - ticketId
        """
        pass

    def leaveGroup(self, reqSeq, groupId):
        """
        Parameters:
         - reqSeq
         - groupId
        """
        pass

    def leaveRoom(self, reqSeq, roomId):
        """
        Parameters:
         - reqSeq
         - roomId
        """
        pass

    def loginWithIdentityCredential(self, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate):
        """
        Parameters:
         - identityProvider
         - identifier
         - password
         - keepLoggedIn
         - accessLocation
         - systemName
         - certificate
        """
        pass

    def loginWithIdentityCredentialForCertificate(self, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate):
        """
        Parameters:
         - identityProvider
         - identifier
         - password
         - keepLoggedIn
         - accessLocation
         - systemName
         - certificate
        """
        pass

    def loginWithVerifier(self, verifier):
        """
        Parameters:
         - verifier
        """
        pass

    def loginWithVerifierForCerificate(self, verifier):
        """
        Parameters:
         - verifier
        """
        pass

    def loginWithVerifierForCertificate(self, verifier):
        """
        Parameters:
         - verifier
        """
        pass

    def logout(self):
        pass

    def logoutSession(self, tokenKey):
        """
        Parameters:
         - tokenKey
        """
        pass

    def noop(self):
        pass

    def notifiedRedirect(self, paramMap):
        """
        Parameters:
         - paramMap
        """
        pass

    def notifyBuddyOnAir(self, seq, receiverMids):
        """
        Parameters:
         - seq
         - receiverMids
        """
        pass

    def notifyIndividualEvent(self, notificationStatus, receiverMids):
        """
        Parameters:
         - notificationStatus
         - receiverMids
        """
        pass

    def notifyInstalled(self, udidHash, applicationTypeWithExtensions):
        """
        Parameters:
         - udidHash
         - applicationTypeWithExtensions
        """
        pass

    def notifyRegistrationComplete(self, udidHash, applicationTypeWithExtensions):
        """
        Parameters:
         - udidHash
         - applicationTypeWithExtensions
        """
        pass

    def notifySleep(self, lastRev, badge):
        """
        Parameters:
         - lastRev
         - badge
        """
        pass

    def notifyUpdated(self, lastRev, deviceInfo):
        """
        Parameters:
         - lastRev
         - deviceInfo
        """
        pass

    def openProximityMatch(self, location):
        """
        Parameters:
         - location
        """
        pass

    def registerBuddyUser(self, buddyId, registrarPassword):
        """
        Parameters:
         - buddyId
         - registrarPassword
        """
        pass

    def registerBuddyUserid(self, seq, userid):
        """
        Parameters:
         - seq
         - userid
        """
        pass

    def registerDevice(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        pass

    def registerDeviceWithIdentityCredential(self, sessionId, provider, identifier, verifier):
        """
        Parameters:
         - sessionId
         - provider
         - identifier
         - verifier
        """
        pass

    def registerDeviceWithoutPhoneNumber(self, region, udidHash, deviceInfo):
        """
        Parameters:
         - region
         - udidHash
         - deviceInfo
        """
        pass

    def registerDeviceWithoutPhoneNumberWithIdentityCredential(self, region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId):
        """
        Parameters:
         - region
         - udidHash
         - deviceInfo
         - provider
         - identifier
         - verifier
         - mid
         - migrationPincodeSessionId
        """
        pass

    def registerUserid(self, reqSeq, userid):
        """
        Parameters:
         - reqSeq
         - userid
        """
        pass

    def registerWapDevice(self, invitationHash, guidHash, email, deviceInfo):
        """
        Parameters:
         - invitationHash
         - guidHash
         - email
         - deviceInfo
        """
        pass

    def registerWithExistingSnsIdAndIdentityCredential(self, identityCredential, region, udidHash, deviceInfo):
        """
        Parameters:
         - identityCredential
         - region
         - udidHash
         - deviceInfo
        """
        pass

    def registerWithSnsId(self, snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid):
        """
        Parameters:
         - snsIdType
         - snsAccessToken
         - region
         - udidHash
         - deviceInfo
         - mid
        """
        pass

    def registerWithSnsIdAndIdentityCredential(self, snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo):
        """
        Parameters:
         - snsIdType
         - snsAccessToken
         - identityCredential
         - region
         - udidHash
         - deviceInfo
        """
        pass

    def reissueDeviceCredential(self):
        pass

    def reissueUserTicket(self, expirationTime, maxUseCount):
        """
        Parameters:
         - expirationTime
         - maxUseCount
        """
        pass

    def getMessageReadRange(self, chatIds):
        """
        Parameters:
         - chatIds
        """
        pass

    def rejectGroupInvitation(self, reqSeq, groupId):
        """
        Parameters:
         - reqSeq
         - groupId
        """
        pass

    def releaseSession(self):
        pass

    def removeAllMessages(self, seq, lastMessageId):
        """
        Parameters:
         - seq
         - lastMessageId
        """
        pass

    def removeBuddyLocation(self, mid, index):
        """
        Parameters:
         - mid
         - index
        """
        pass

    def removeMessage(self, messageId):
        """
        Parameters:
         - messageId
        """
        pass

    def makeUserAddMyselfAsContact(self, contactOwnerMid):
        """
        Parameters:
         - contactOwnerMid
        """
        pass

    def removeMessageFromMyHome(self, messageId):
        """
        Parameters:
         - messageId
        """
        pass

    def removeSnsId(self, snsIdType):
        """
        Parameters:
         - snsIdType
        """
        pass

    def report(self, syncOpRevision, category, report):
        """
        Parameters:
         - syncOpRevision
         - category
         - report
        """
        pass

    def reportContacts(self, syncOpRevision, category, contactReports, actionType):
        """
        Parameters:
         - syncOpRevision
         - category
         - contactReports
         - actionType
        """
        pass

    def reportGroups(self, syncOpRevision, groups):
        """
        Parameters:
         - syncOpRevision
         - groups
        """
        pass

    def reportProfile(self, syncOpRevision, profile):
        """
        Parameters:
         - syncOpRevision
         - profile
        """
        pass

    def reportRooms(self, syncOpRevision, rooms):
        """
        Parameters:
         - syncOpRevision
         - rooms
        """
        pass

    def findAndAddContactByMetaTag(self, reqSeq, userid, reference):
        """
        Parameters:
         - reqSeq
         - userid
         - reference
        """
        pass

    def reportSettings(self, syncOpRevision, settings):
        """
        Parameters:
         - syncOpRevision
         - settings
        """
        pass

    def reportSpam(self, chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages):
        """
        Parameters:
         - chatMid
         - memberMids
         - spammerReasons
         - senderMids
         - spamMessageIds
         - spamMessages
        """
        pass

    def reportSpammer(self, spammerMid, spammerReasons, spamMessageIds):
        """
        Parameters:
         - spammerMid
         - spammerReasons
         - spamMessageIds
        """
        pass

    def requestAccountPasswordReset(self, provider, identifier, locale):
        """
        Parameters:
         - provider
         - identifier
         - locale
        """
        pass

    def requestEmailConfirmation(self, emailConfirmation):
        """
        Parameters:
         - emailConfirmation
        """
        pass

    def requestIdentityUnbind(self, provider, identifier):
        """
        Parameters:
         - provider
         - identifier
        """
        pass

    def resendEmailConfirmation(self, verifier):
        """
        Parameters:
         - verifier
        """
        pass

    def resendPinCode(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        pass

    def resendPinCodeBySMS(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        pass

    def sendChatChecked(self, seq, consumer, lastMessageId):
        """
        Parameters:
         - seq
         - consumer
         - lastMessageId
        """
        pass

    def sendMessageAwaitCommit(self, seq, message):
        """
        Parameters:
         - seq
         - message
        """
        pass

    def sendChatRemoved(self, seq, consumer, lastMessageId):
        """
        Parameters:
         - seq
         - consumer
         - lastMessageId
        """
        pass

    def sendContentPreviewUpdated(self, esq, messageId, receiverMids):
        """
        Parameters:
         - esq
         - messageId
         - receiverMids
        """
        pass

    def sendContentReceipt(self, seq, consumer, messageId):
        """
        Parameters:
         - seq
         - consumer
         - messageId
        """
        pass

    def sendDummyPush(self):
        pass

    def removeE2EEPublicKey(self, publicKey):
        """
        Parameters:
         - publicKey
        """
        pass

    def negotiateE2EEPublicKey(self, mid):
        """
        Parameters:
         - mid
        """
        pass

    def getE2EEPublicKey(self, mid, version, keyId):
        """
        Parameters:
         - mid
         - version
         - keyId
        """
        pass

    def requestE2EEKeyExchange(self, reqSeq, temporalPublicKey, publicKey, verifier):
        """
        Parameters:
         - reqSeq
         - temporalPublicKey
         - publicKey
         - verifier
        """
        pass

    def getLastE2EEPublicKeys(self, chatMid):
        """
        Parameters:
         - chatMid
        """
        pass

    def registerE2EEPublicKey(self, reqSeq, publicKey):
        """
        Parameters:
         - reqSeq
         - publicKey
        """
        pass

    def getE2EEPublicKeys(self):
        pass

    def getE2EEPublicKeysEx(self, ignoreE2EEStatus):
        """
        Parameters:
         - ignoreE2EEStatus
        """
        pass

    def getReadMessageOpsInBulk(self, chatIds):
        """
        Parameters:
         - chatIds
        """
        pass

    def sendEvent(self, seq, message):
        """
        Parameters:
         - seq
         - message
        """
        pass

    def sendMessage(self, seq, message):
        """
        Parameters:
         - seq
         - message
        """
        pass

    def sendMessageIgnored(self, seq, consumer, messageIds):
        """
        Parameters:
         - seq
         - consumer
         - messageIds
        """
        pass

    def sendMessageReceipt(self, seq, consumer, messageIds):
        """
        Parameters:
         - seq
         - consumer
         - messageIds
        """
        pass

    def findContactByMetaTag(self, userid, reference):
        """
        Parameters:
         - userid
         - reference
        """
        pass

    def sendMessageToMyHome(self, seq, message):
        """
        Parameters:
         - seq
         - message
        """
        pass

    def setBuddyLocation(self, mid, index, location):
        """
        Parameters:
         - mid
         - index
         - location
        """
        pass

    def setIdentityCredential(self, identifier, verifier, provider):
        """
        Parameters:
         - identifier
         - verifier
         - provider
        """
        pass

    def setNotificationsEnabled(self, reqSeq, type, target, enablement):
        """
        Parameters:
         - reqSeq
         - type
         - target
         - enablement
        """
        pass

    def startUpdateVerification(self, region, carrier, phone, udidHash, deviceInfo, networkCode, locale):
        """
        Parameters:
         - region
         - carrier
         - phone
         - udidHash
         - deviceInfo
         - networkCode
         - locale
        """
        pass

    def startVerification(self, region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash):
        """
        Parameters:
         - region
         - carrier
         - phone
         - udidHash
         - deviceInfo
         - networkCode
         - mid
         - locale
         - simInfo
         - oldUdidHash
        """
        pass

    def updateGroupPreferenceAttribute(self, reqSeq, groupMid, updatedAttrs):
        """
        Parameters:
         - reqSeq
         - groupMid
         - updatedAttrs
        """
        pass

    def createRoomV2(self, reqSeq, contactIds):
        """
        Parameters:
         - reqSeq
         - contactIds
        """
        pass

    def storeUpdateProfileAttribute(self, seq, profileAttribute, value):
        """
        Parameters:
         - seq
         - profileAttribute
         - value
        """
        pass

    def syncContactBySnsIds(self, reqSeq, modifications):
        """
        Parameters:
         - reqSeq
         - modifications
        """
        pass

    def syncContacts(self, reqSeq, localContacts):
        """
        Parameters:
         - reqSeq
         - localContacts
        """
        pass

    def trySendMessage(self, seq, message):
        """
        Parameters:
         - seq
         - message
        """
        pass

    def getNextMessagesV2(self, messageBoxId, startMessageId, messagesCount):
        """
        Parameters:
         - messageBoxId
         - startMessageId
         - messagesCount
        """
        pass

    def getMessageBoxCompactWrapUpV2(self, messageBoxId):
        """
        Parameters:
         - messageBoxId
        """
        pass

    def getRecentMessagesV2(self, messageBoxId, messagesCount):
        """
        Parameters:
         - messageBoxId
         - messagesCount
        """
        pass

    def validateContactsOnBot(self, contacts):
        """
        Parameters:
         - contacts
        """
        pass

    def tryFriendRequest(self, midOrEMid, method, friendRequestParams):
        """
        Parameters:
         - midOrEMid
         - method
         - friendRequestParams
        """
        pass

    def unblockContact(self, reqSeq, id):
        """
        Parameters:
         - reqSeq
         - id
        """
        pass

    def unblockRecommendation(self, reqSeq, id):
        """
        Parameters:
         - reqSeq
         - id
        """
        pass

    def unregisterUserAndDevice(self):
        pass

    def updateApnsDeviceToken(self, apnsDeviceToken):
        """
        Parameters:
         - apnsDeviceToken
        """
        pass

    def updateBuddySetting(self, key, value):
        """
        Parameters:
         - key
         - value
        """
        pass

    def updateC2DMRegistrationId(self, registrationId):
        """
        Parameters:
         - registrationId
        """
        pass

    def updateContactSetting(self, reqSeq, mid, flag, value):
        """
        Parameters:
         - reqSeq
         - mid
         - flag
         - value
        """
        pass

    def updateCustomModeSettings(self, customMode, paramMap):
        """
        Parameters:
         - customMode
         - paramMap
        """
        pass

    def updateDeviceInfo(self, deviceUid, deviceInfo):
        """
        Parameters:
         - deviceUid
         - deviceInfo
        """
        pass

    def updateGroup(self, reqSeq, group):
        """
        Parameters:
         - reqSeq
         - group
        """
        pass

    def updateNotificationToken(self, type, token):
        """
        Parameters:
         - type
         - token
        """
        pass

    def updateNotificationTokenWithBytes(self, type, token):
        """
        Parameters:
         - type
         - token
        """
        pass

    def updateProfile(self, reqSeq, profile):
        """
        Parameters:
         - reqSeq
         - profile
        """
        pass

    def updateProfileAttribute(self, reqSeq, attr, value):
        """
        Parameters:
         - reqSeq
         - attr
         - value
        """
        pass

    def updateRegion(self, region):
        """
        Parameters:
         - region
        """
        pass

    def updateSettings(self, reqSeq, settings):
        """
        Parameters:
         - reqSeq
         - settings
        """
        pass

    def updateSettings2(self, reqSeq, settings):
        """
        Parameters:
         - reqSeq
         - settings
        """
        pass

    def updateSettingsAttribute(self, reqSeq, attr, value):
        """
        Parameters:
         - reqSeq
         - attr
         - value
        """
        pass

    def updateSettingsAttributes(self, reqSeq, attrBitset, settings):
        """
        Parameters:
         - reqSeq
         - attrBitset
         - settings
        """
        pass

    def verifyIdentityCredential(self, identityProvider, identifier, password):
        """
        Parameters:
         - identityProvider
         - identifier
         - password
        """
        pass

    def verifyIdentityCredentialWithResult(self, identityCredential):
        """
        Parameters:
         - identityCredential
        """
        pass

    def verifyPhone(self, sessionId, pinCode, udidHash):
        """
        Parameters:
         - sessionId
         - pinCode
         - udidHash
        """
        pass

    def verifyQrcode(self, verifier, pinCode):
        """
        Parameters:
         - verifier
         - pinCode
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def getChatRoomAnnouncementsBulk(self, chatRoomMids):
        """
        Parameters:
         - chatRoomMids
        """
        self.send_getChatRoomAnnouncementsBulk(chatRoomMids)
        return self.recv_getChatRoomAnnouncementsBulk()

    def send_getChatRoomAnnouncementsBulk(self, chatRoomMids):
        self._oprot.writeMessageBegin('getChatRoomAnnouncementsBulk', TMessageType.CALL, self._seqid)
        args = getChatRoomAnnouncementsBulk_args()
        args.chatRoomMids = chatRoomMids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChatRoomAnnouncementsBulk(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChatRoomAnnouncementsBulk_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChatRoomAnnouncementsBulk failed: unknown result")

    def getChatRoomAnnouncements(self, chatRoomMid):
        """
        Parameters:
         - chatRoomMid
        """
        self.send_getChatRoomAnnouncements(chatRoomMid)
        return self.recv_getChatRoomAnnouncements()

    def send_getChatRoomAnnouncements(self, chatRoomMid):
        self._oprot.writeMessageBegin('getChatRoomAnnouncements', TMessageType.CALL, self._seqid)
        args = getChatRoomAnnouncements_args()
        args.chatRoomMid = chatRoomMid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getChatRoomAnnouncements(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChatRoomAnnouncements_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChatRoomAnnouncements failed: unknown result")

    def createChatRoomAnnouncement(self, reqSeq, chatRoomMid, type, contents):
        """
        Parameters:
         - reqSeq
         - chatRoomMid
         - type
         - contents
        """
        self.send_createChatRoomAnnouncement(reqSeq, chatRoomMid, type, contents)
        return self.recv_createChatRoomAnnouncement()

    def send_createChatRoomAnnouncement(self, reqSeq, chatRoomMid, type, contents):
        self._oprot.writeMessageBegin('createChatRoomAnnouncement', TMessageType.CALL, self._seqid)
        args = createChatRoomAnnouncement_args()
        args.reqSeq = reqSeq
        args.chatRoomMid = chatRoomMid
        args.type = type
        args.contents = contents
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createChatRoomAnnouncement(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createChatRoomAnnouncement_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createChatRoomAnnouncement failed: unknown result")

    def removeChatRoomAnnouncement(self, reqSeq, chatRoomMid, announcementSeq):
        """
        Parameters:
         - reqSeq
         - chatRoomMid
         - announcementSeq
        """
        self.send_removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq)
        self.recv_removeChatRoomAnnouncement()

    def send_removeChatRoomAnnouncement(self, reqSeq, chatRoomMid, announcementSeq):
        self._oprot.writeMessageBegin('removeChatRoomAnnouncement', TMessageType.CALL, self._seqid)
        args = removeChatRoomAnnouncement_args()
        args.reqSeq = reqSeq
        args.chatRoomMid = chatRoomMid
        args.announcementSeq = announcementSeq
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeChatRoomAnnouncement(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeChatRoomAnnouncement_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def unsendMessage(self, seq, messageId):
        """
        Parameters:
         - seq
         - messageId
        """
        self.send_unsendMessage(seq, messageId)
        self.recv_unsendMessage()

    def send_unsendMessage(self, seq, messageId):
        self._oprot.writeMessageBegin('unsendMessage', TMessageType.CALL, self._seqid)
        args = unsendMessage_args()
        args.seq = seq
        args.messageId = messageId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_unsendMessage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = unsendMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def getGroupWithoutMembers(self, groupId):
        """
        Parameters:
         - groupId
        """
        self.send_getGroupWithoutMembers(groupId)
        return self.recv_getGroupWithoutMembers()

    def send_getGroupWithoutMembers(self, groupId):
        self._oprot.writeMessageBegin('getGroupWithoutMembers', TMessageType.CALL, self._seqid)
        args = getGroupWithoutMembers_args()
        args.groupId = groupId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getGroupWithoutMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getGroupWithoutMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getGroupWithoutMembers failed: unknown result")

    def requestResendMessage(self, reqSeq, senderMid, messageId):
        """
        Parameters:
         - reqSeq
         - senderMid
         - messageId
        """
        self.send_requestResendMessage(reqSeq, senderMid, messageId)
        self.recv_requestResendMessage()

    def send_requestResendMessage(self, reqSeq, senderMid, messageId):
        self._oprot.writeMessageBegin('requestResendMessage', TMessageType.CALL, self._seqid)
        args = requestResendMessage_args()
        args.reqSeq = reqSeq
        args.senderMid = senderMid
        args.messageId = messageId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_requestResendMessage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = requestResendMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def respondResendMessage(self, reqSeq, receiverMid, originalMessageId, resendMessage, errorCode):
        """
        Parameters:
         - reqSeq
         - receiverMid
         - originalMessageId
         - resendMessage
         - errorCode
        """
        self.send_respondResendMessage(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode)
        self.recv_respondResendMessage()

    def send_respondResendMessage(self, reqSeq, receiverMid, originalMessageId, resendMessage, errorCode):
        self._oprot.writeMessageBegin('respondResendMessage', TMessageType.CALL, self._seqid)
        args = respondResendMessage_args()
        args.reqSeq = reqSeq
        args.receiverMid = receiverMid
        args.originalMessageId = originalMessageId
        args.resendMessage = resendMessage
        args.errorCode = errorCode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_respondResendMessage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = respondResendMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def acceptGroupInvitation(self, reqSeq, groupId):
        """
        Parameters:
         - reqSeq
         - groupId
        """
        self.send_acceptGroupInvitation(reqSeq, groupId)
        self.recv_acceptGroupInvitation()

    def send_acceptGroupInvitation(self, reqSeq, groupId):
        self._oprot.writeMessageBegin('acceptGroupInvitation', TMessageType.CALL, self._seqid)
        args = acceptGroupInvitation_args()
        args.reqSeq = reqSeq
        args.groupId = groupId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_acceptGroupInvitation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = acceptGroupInvitation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def acceptGroupInvitationByTicket(self, reqSeq, GroupMid, ticketId):
        """
        Parameters:
         - reqSeq
         - GroupMid
         - ticketId
        """
        self.send_acceptGroupInvitationByTicket(reqSeq, GroupMid, ticketId)
        self.recv_acceptGroupInvitationByTicket()

    def send_acceptGroupInvitationByTicket(self, reqSeq, GroupMid, ticketId):
        self._oprot.writeMessageBegin('acceptGroupInvitationByTicket', TMessageType.CALL, self._seqid)
        args = acceptGroupInvitationByTicket_args()
        args.reqSeq = reqSeq
        args.GroupMid = GroupMid
        args.ticketId = ticketId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_acceptGroupInvitationByTicket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = acceptGroupInvitationByTicket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def acceptProximityMatches(self, sessionId, ids):
        """
        Parameters:
         - sessionId
         - ids
        """
        self.send_acceptProximityMatches(sessionId, ids)
        self.recv_acceptProximityMatches()

    def send_acceptProximityMatches(self, sessionId, ids):
        self._oprot.writeMessageBegin('acceptProximityMatches', TMessageType.CALL, self._seqid)
        args = acceptProximityMatches_args()
        args.sessionId = sessionId
        args.ids = ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_acceptProximityMatches(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = acceptProximityMatches_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def acquireCallRoute(self, to):
        """
        Parameters:
         - to
        """
        self.send_acquireCallRoute(to)
        return self.recv_acquireCallRoute()

    def send_acquireCallRoute(self, to):
        self._oprot.writeMessageBegin('acquireCallRoute', TMessageType.CALL, self._seqid)
        args = acquireCallRoute_args()
        args.to = to
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_acquireCallRoute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = acquireCallRoute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "acquireCallRoute failed: unknown result")

    def acquireCallTicket(self, to):
        """
        Parameters:
         - to
        """
        self.send_acquireCallTicket(to)
        return self.recv_acquireCallTicket()

    def send_acquireCallTicket(self, to):
        self._oprot.writeMessageBegin('acquireCallTicket', TMessageType.CALL, self._seqid)
        args = acquireCallTicket_args()
        args.to = to
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_acquireCallTicket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = acquireCallTicket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "acquireCallTicket failed: unknown result")

    def acquireEncryptedAccessToken(self, featureType):
        """
        Parameters:
         - featureType
        """
        self.send_acquireEncryptedAccessToken(featureType)
        return self.recv_acquireEncryptedAccessToken()

    def send_acquireEncryptedAccessToken(self, featureType):
        self._oprot.writeMessageBegin('acquireEncryptedAccessToken', TMessageType.CALL, self._seqid)
        args = acquireEncryptedAccessToken_args()
        args.featureType = featureType
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_acquireEncryptedAccessToken(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = acquireEncryptedAccessToken_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "acquireEncryptedAccessToken failed: unknown result")

    def addSnsId(self, snsIdType, snsAccessToken):
        """
        Parameters:
         - snsIdType
         - snsAccessToken
        """
        self.send_addSnsId(snsIdType, snsAccessToken)
        return self.recv_addSnsId()

    def send_addSnsId(self, snsIdType, snsAccessToken):
        self._oprot.writeMessageBegin('addSnsId', TMessageType.CALL, self._seqid)
        args = addSnsId_args()
        args.snsIdType = snsIdType
        args.snsAccessToken = snsAccessToken
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addSnsId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addSnsId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "addSnsId failed: unknown result")

    def blockContact(self, reqSeq, id):
        """
        Parameters:
         - reqSeq
         - id
        """
        self.send_blockContact(reqSeq, id)
        self.recv_blockContact()

    def send_blockContact(self, reqSeq, id):
        self._oprot.writeMessageBegin('blockContact', TMessageType.CALL, self._seqid)
        args = blockContact_args()
        args.reqSeq = reqSeq
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_blockContact(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = blockContact_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def blockRecommendation(self, reqSeq, id):
        """
        Parameters:
         - reqSeq
         - id
        """
        self.send_blockRecommendation(reqSeq, id)
        self.recv_blockRecommendation()

    def send_blockRecommendation(self, reqSeq, id):
        self._oprot.writeMessageBegin('blockRecommendation', TMessageType.CALL, self._seqid)
        args = blockRecommendation_args()
        args.reqSeq = reqSeq
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_blockRecommendation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = blockRecommendation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def cancelGroupInvitation(self, reqSeq, groupId, contactIds):
        """
        Parameters:
         - reqSeq
         - groupId
         - contactIds
        """
        self.send_cancelGroupInvitation(reqSeq, groupId, contactIds)
        self.recv_cancelGroupInvitation()

    def send_cancelGroupInvitation(self, reqSeq, groupId, contactIds):
        self._oprot.writeMessageBegin('cancelGroupInvitation', TMessageType.CALL, self._seqid)
        args = cancelGroupInvitation_args()
        args.reqSeq = reqSeq
        args.groupId = groupId
        args.contactIds = contactIds
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_cancelGroupInvitation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = cancelGroupInvitation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def changeVerificationMethod(self, sessionId, method):
        """
        Parameters:
         - sessionId
         - method
        """
        self.send_changeVerificationMethod(sessionId, method)
        return self.recv_changeVerificationMethod()

    def send_changeVerificationMethod(self, sessionId, method):
        self._oprot.writeMessageBegin('changeVerificationMethod', TMessageType.CALL, self._seqid)
        args = changeVerificationMethod_args()
        args.sessionId = sessionId
        args.method = method
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_changeVerificationMethod(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeVerificationMethod_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "changeVerificationMethod failed: unknown result")

    def clearIdentityCredential(self):
        self.send_clearIdentityCredential()
        self.recv_clearIdentityCredential()

    def send_clearIdentityCredential(self):
        self._oprot.writeMessageBegin('clearIdentityCredential', TMessageType.CALL, self._seqid)
        args = clearIdentityCredential_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_clearIdentityCredential(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = clearIdentityCredential_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def clearMessageBox(self, channelId, messageBoxId):
        """
        Parameters:
         - channelId
         - messageBoxId
        """
        self.send_clearMessageBox(channelId, messageBoxId)
        self.recv_clearMessageBox()

    def send_clearMessageBox(self, channelId, messageBoxId):
        self._oprot.writeMessageBegin('clearMessageBox', TMessageType.CALL, self._seqid)
        args = clearMessageBox_args()
        args.channelId = channelId
        args.messageBoxId = messageBoxId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_clearMessageBox(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = clearMessageBox_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def closeProximityMatch(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        self.send_closeProximityMatch(sessionId)
        self.recv_closeProximityMatch()

    def send_closeProximityMatch(self, sessionId):
        self._oprot.writeMessageBegin('closeProximityMatch', TMessageType.CALL, self._seqid)
        args = closeProximityMatch_args()
        args.sessionId = sessionId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_closeProximityMatch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = closeProximityMatch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def commitSendMessage(self, seq, messageId, receiverMids):
        """
        Parameters:
         - seq
         - messageId
         - receiverMids
        """
        self.send_commitSendMessage(seq, messageId, receiverMids)
        return self.recv_commitSendMessage()

    def send_commitSendMessage(self, seq, messageId, receiverMids):
        self._oprot.writeMessageBegin('commitSendMessage', TMessageType.CALL, self._seqid)
        args = commitSendMessage_args()
        args.seq = seq
        args.messageId = messageId
        args.receiverMids = receiverMids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_commitSendMessage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = commitSendMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "commitSendMessage failed: unknown result")

    def commitSendMessages(self, seq, messageIds, receiverMids):
        """
        Parameters:
         - seq
         - messageIds
         - receiverMids
        """
        self.send_commitSendMessages(seq, messageIds, receiverMids)
        return self.recv_commitSendMessages()

    def send_commitSendMessages(self, seq, messageIds, receiverMids):
        self._oprot.writeMessageBegin('commitSendMessages', TMessageType.CALL, self._seqid)
        args = commitSendMessages_args()
        args.seq = seq
        args.messageIds = messageIds
        args.receiverMids = receiverMids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_commitSendMessages(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = commitSendMessages_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "commitSendMessages failed: unknown result")

    def commitUpdateProfile(self, seq, attrs, receiverMids):
        """
        Parameters:
         - seq
         - attrs
         - receiverMids
        """
        self.send_commitUpdateProfile(seq, attrs, receiverMids)
        return self.recv_commitUpdateProfile()

    def send_commitUpdateProfile(self, seq, attrs, receiverMids):
        self._oprot.writeMessageBegin('commitUpdateProfile', TMessageType.CALL, self._seqid)
        args = commitUpdateProfile_args()
        args.seq = seq
        args.attrs = attrs
        args.receiverMids = receiverMids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_commitUpdateProfile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = commitUpdateProfile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "commitUpdateProfile failed: unknown result")

    def confirmEmail(self, verifier, pinCode):
        """
        Parameters:
         - verifier
         - pinCode
        """
        self.send_confirmEmail(verifier, pinCode)
        self.recv_confirmEmail()

    def send_confirmEmail(self, verifier, pinCode):
        self._oprot.writeMessageBegin('confirmEmail', TMessageType.CALL, self._seqid)
        args = confirmEmail_args()
        args.verifier = verifier
        args.pinCode = pinCode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_confirmEmail(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = confirmEmail_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def createGroup(self, seq, name, contactIds):
        """
        Parameters:
         - seq
         - name
         - contactIds
        """
        self.send_createGroup(seq, name, contactIds)
        return self.recv_createGroup()

    def send_createGroup(self, seq, name, contactIds):
        self._oprot.writeMessageBegin('createGroup', TMessageType.CALL, self._seqid)
        args = createGroup_args()
        args.seq = seq
        args.name = name
        args.contactIds = contactIds
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createGroup(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createGroup_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createGroup failed: unknown result")

    def createQrcodeBase64Image(self, url, characterSet, imageSize, x, y, width, height):
        """
        Parameters:
         - url
         - characterSet
         - imageSize
         - x
         - y
         - width
         - height
        """
        self.send_createQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height)
        return self.recv_createQrcodeBase64Image()

    def send_createQrcodeBase64Image(self, url, characterSet, imageSize, x, y, width, height):
        self._oprot.writeMessageBegin('createQrcodeBase64Image', TMessageType.CALL, self._seqid)
        args = createQrcodeBase64Image_args()
        args.url = url
        args.characterSet = characterSet
        args.imageSize = imageSize
        args.x = x
        args.y = y
        args.width = width
        args.height = height
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createQrcodeBase64Image(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createQrcodeBase64Image_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createQrcodeBase64Image failed: unknown result")

    def createRoom(self, reqSeq, contactIds):
        """
        Parameters:
         - reqSeq
         - contactIds
        """
        self.send_createRoom(reqSeq, contactIds)
        return self.recv_createRoom()

    def send_createRoom(self, reqSeq, contactIds):
        self._oprot.writeMessageBegin('createRoom', TMessageType.CALL, self._seqid)
        args = createRoom_args()
        args.reqSeq = reqSeq
        args.contactIds = contactIds
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createRoom(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createRoom_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createRoom failed: unknown result")

    def createSession(self):
        self.send_createSession()
        return self.recv_createSession()

    def send_createSession(self):
        self._oprot.writeMessageBegin('createSession', TMessageType.CALL, self._seqid)
        args = createSession_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createSession(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createSession_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createSession failed: unknown result")

    def fetchAnnouncements(self, lastFetchedIndex):
        """
        Parameters:
         - lastFetchedIndex
        """
        self.send_fetchAnnouncements(lastFetchedIndex)
        return self.recv_fetchAnnouncements()

    def send_fetchAnnouncements(self, lastFetchedIndex):
        self._oprot.writeMessageBegin('fetchAnnouncements', TMessageType.CALL, self._seqid)
        args = fetchAnnouncements_args()
        args.lastFetchedIndex = lastFetchedIndex
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetchAnnouncements(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetchAnnouncements_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetchAnnouncements failed: unknown result")

    def fetchMessages(self, localTs, count):
        """
        Parameters:
         - localTs
         - count
        """
        self.send_fetchMessages(localTs, count)
        return self.recv_fetchMessages()

    def send_fetchMessages(self, localTs, count):
        self._oprot.writeMessageBegin('fetchMessages', TMessageType.CALL, self._seqid)
        args = fetchMessages_args()
        args.localTs = localTs
        args.count = count
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetchMessages(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetchMessages_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetchMessages failed: unknown result")

    def fetchOperations(self, localRev, count):
        """
        Parameters:
         - localRev
         - count
        """
        self.send_fetchOperations(localRev, count)
        return self.recv_fetchOperations()

    def send_fetchOperations(self, localRev, count):
        self._oprot.writeMessageBegin('fetchOperations', TMessageType.CALL, self._seqid)
        args = fetchOperations_args()
        args.localRev = localRev
        args.count = count
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetchOperations(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetchOperations_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetchOperations failed: unknown result")

    def fetchOps(self, localRev, count, globalRev, individualRev):
        """
        Parameters:
         - localRev
         - count
         - globalRev
         - individualRev
        """
        self.send_fetchOps(localRev, count, globalRev, individualRev)
        return self.recv_fetchOps()

    def send_fetchOps(self, localRev, count, globalRev, individualRev):
        self._oprot.writeMessageBegin('fetchOps', TMessageType.CALL, self._seqid)
        args = fetchOps_args()
        args.localRev = localRev
        args.count = count
        args.globalRev = globalRev
        args.individualRev = individualRev
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetchOps(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetchOps_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetchOps failed: unknown result")

    def findAndAddContactsByEmail(self, reqSeq, emails):
        """
        Parameters:
         - reqSeq
         - emails
        """
        self.send_findAndAddContactsByEmail(reqSeq, emails)
        return self.recv_findAndAddContactsByEmail()

    def send_findAndAddContactsByEmail(self, reqSeq, emails):
        self._oprot.writeMessageBegin('findAndAddContactsByEmail', TMessageType.CALL, self._seqid)
        args = findAndAddContactsByEmail_args()
        args.reqSeq = reqSeq
        args.emails = emails
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findAndAddContactsByEmail(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findAndAddContactsByEmail_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findAndAddContactsByEmail failed: unknown result")

    def findAndAddContactsByMid(self, reqSeq, mid, type, reference):
        """
        Parameters:
         - reqSeq
         - mid
         - type
         - reference
        """
        self.send_findAndAddContactsByMid(reqSeq, mid, type, reference)
        return self.recv_findAndAddContactsByMid()

    def send_findAndAddContactsByMid(self, reqSeq, mid, type, reference):
        self._oprot.writeMessageBegin('findAndAddContactsByMid', TMessageType.CALL, self._seqid)
        args = findAndAddContactsByMid_args()
        args.reqSeq = reqSeq
        args.mid = mid
        args.type = type
        args.reference = reference
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findAndAddContactsByMid(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findAndAddContactsByMid_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findAndAddContactsByMid failed: unknown result")

    def findGroupByTicketV2(self, ticketId):
        """
        Parameters:
         - ticketId
        """
        self.send_findGroupByTicketV2(ticketId)
        return self.recv_findGroupByTicketV2()

    def send_findGroupByTicketV2(self, ticketId):
        self._oprot.writeMessageBegin('findGroupByTicketV2', TMessageType.CALL, self._seqid)
        args = findGroupByTicketV2_args()
        args.ticketId = ticketId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findGroupByTicketV2(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findGroupByTicketV2_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findGroupByTicketV2 failed: unknown result")

    def findAndAddContactsByPhone(self, reqSeq, phones):
        """
        Parameters:
         - reqSeq
         - phones
        """
        self.send_findAndAddContactsByPhone(reqSeq, phones)
        return self.recv_findAndAddContactsByPhone()

    def send_findAndAddContactsByPhone(self, reqSeq, phones):
        self._oprot.writeMessageBegin('findAndAddContactsByPhone', TMessageType.CALL, self._seqid)
        args = findAndAddContactsByPhone_args()
        args.reqSeq = reqSeq
        args.phones = phones
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findAndAddContactsByPhone(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findAndAddContactsByPhone_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findAndAddContactsByPhone failed: unknown result")

    def getFriendRequests(self, direction, lastSeenSeqId):
        """
        Parameters:
         - direction
         - lastSeenSeqId
        """
        self.send_getFriendRequests(direction, lastSeenSeqId)
        return self.recv_getFriendRequests()

    def send_getFriendRequests(self, direction, lastSeenSeqId):
        self._oprot.writeMessageBegin('getFriendRequests', TMessageType.CALL, self._seqid)
        args = getFriendRequests_args()
        args.direction = direction
        args.lastSeenSeqId = lastSeenSeqId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getFriendRequests(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getFriendRequests_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getFriendRequests failed: unknown result")

    def removeFriendRequest(self, direction, midOrEMid):
        """
        Parameters:
         - direction
         - midOrEMid
        """
        self.send_removeFriendRequest(direction, midOrEMid)
        self.recv_removeFriendRequest()

    def send_removeFriendRequest(self, direction, midOrEMid):
        self._oprot.writeMessageBegin('removeFriendRequest', TMessageType.CALL, self._seqid)
        args = removeFriendRequest_args()
        args.direction = direction
        args.midOrEMid = midOrEMid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeFriendRequest(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeFriendRequest_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def findAndAddContactsByUserid(self, reqSeq, userid):
        """
        Parameters:
         - reqSeq
         - userid
        """
        self.send_findAndAddContactsByUserid(reqSeq, userid)
        return self.recv_findAndAddContactsByUserid()

    def send_findAndAddContactsByUserid(self, reqSeq, userid):
        self._oprot.writeMessageBegin('findAndAddContactsByUserid', TMessageType.CALL, self._seqid)
        args = findAndAddContactsByUserid_args()
        args.reqSeq = reqSeq
        args.userid = userid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findAndAddContactsByUserid(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findAndAddContactsByUserid_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findAndAddContactsByUserid failed: unknown result")

    def findContactByUserid(self, userid):
        """
        Parameters:
         - userid
        """
        self.send_findContactByUserid(userid)
        return self.recv_findContactByUserid()

    def send_findContactByUserid(self, userid):
        self._oprot.writeMessageBegin('findContactByUserid', TMessageType.CALL, self._seqid)
        args = findContactByUserid_args()
        args.userid = userid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findContactByUserid(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findContactByUserid_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findContactByUserid failed: unknown result")

    def findContactByUserTicket(self, ticketIdWithTag):
        """
        Parameters:
         - ticketIdWithTag
        """
        self.send_findContactByUserTicket(ticketIdWithTag)
        return self.recv_findContactByUserTicket()

    def send_findContactByUserTicket(self, ticketIdWithTag):
        self._oprot.writeMessageBegin('findContactByUserTicket', TMessageType.CALL, self._seqid)
        args = findContactByUserTicket_args()
        args.ticketIdWithTag = ticketIdWithTag
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findContactByUserTicket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findContactByUserTicket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findContactByUserTicket failed: unknown result")

    def findContactsByEmail(self, emails):
        """
        Parameters:
         - emails
        """
        self.send_findContactsByEmail(emails)
        return self.recv_findContactsByEmail()

    def send_findContactsByEmail(self, emails):
        self._oprot.writeMessageBegin('findContactsByEmail', TMessageType.CALL, self._seqid)
        args = findContactsByEmail_args()
        args.emails = emails
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findContactsByEmail(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findContactsByEmail_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findContactsByEmail failed: unknown result")

    def findContactsByPhone(self, phones):
        """
        Parameters:
         - phones
        """
        self.send_findContactsByPhone(phones)
        return self.recv_findContactsByPhone()

    def send_findContactsByPhone(self, phones):
        self._oprot.writeMessageBegin('findContactsByPhone', TMessageType.CALL, self._seqid)
        args = findContactsByPhone_args()
        args.phones = phones
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findContactsByPhone(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findContactsByPhone_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findContactsByPhone failed: unknown result")

    def findSnsIdUserStatus(self, snsIdType, snsAccessToken, udidHash):
        """
        Parameters:
         - snsIdType
         - snsAccessToken
         - udidHash
        """
        self.send_findSnsIdUserStatus(snsIdType, snsAccessToken, udidHash)
        return self.recv_findSnsIdUserStatus()

    def send_findSnsIdUserStatus(self, snsIdType, snsAccessToken, udidHash):
        self._oprot.writeMessageBegin('findSnsIdUserStatus', TMessageType.CALL, self._seqid)
        args = findSnsIdUserStatus_args()
        args.snsIdType = snsIdType
        args.snsAccessToken = snsAccessToken
        args.udidHash = udidHash
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findSnsIdUserStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findSnsIdUserStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findSnsIdUserStatus failed: unknown result")

    def finishUpdateVerification(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        self.send_finishUpdateVerification(sessionId)
        self.recv_finishUpdateVerification()

    def send_finishUpdateVerification(self, sessionId):
        self._oprot.writeMessageBegin('finishUpdateVerification', TMessageType.CALL, self._seqid)
        args = finishUpdateVerification_args()
        args.sessionId = sessionId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_finishUpdateVerification(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = finishUpdateVerification_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def generateUserTicket(self, expirationTime, maxUseCount):
        """
        Parameters:
         - expirationTime
         - maxUseCount
        """
        self.send_generateUserTicket(expirationTime, maxUseCount)
        return self.recv_generateUserTicket()

    def send_generateUserTicket(self, expirationTime, maxUseCount):
        self._oprot.writeMessageBegin('generateUserTicket', TMessageType.CALL, self._seqid)
        args = generateUserTicket_args()
        args.expirationTime = expirationTime
        args.maxUseCount = maxUseCount
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_generateUserTicket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = generateUserTicket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "generateUserTicket failed: unknown result")

    def destroyMessage(self, seq, chatId, messageId, sessionId):
        """
        Parameters:
         - seq
         - chatId
         - messageId
         - sessionId
        """
        self.send_destroyMessage(seq, chatId, messageId, sessionId)
        self.recv_destroyMessage()

    def send_destroyMessage(self, seq, chatId, messageId, sessionId):
        self._oprot.writeMessageBegin('destroyMessage', TMessageType.CALL, self._seqid)
        args = destroyMessage_args()
        args.seq = seq
        args.chatId = chatId
        args.messageId = messageId
        args.sessionId = sessionId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_destroyMessage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = destroyMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def getAcceptedProximityMatches(self, sessionId):
        """
        Parameters:
         - sessionId
        """
        self.send_getAcceptedProximityMatches(sessionId)
        return self.recv_getAcceptedProximityMatches()

    def send_getAcceptedProximityMatches(self, sessionId):
        self._oprot.writeMessageBegin('getAcceptedProximityMatches', TMessageType.CALL, self._seqid)
        args = getAcceptedProximityMatches_args()
        args.sessionId = sessionId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAcceptedProximityMatches(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAcceptedProximityMatches_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAcceptedProximityMatches failed: unknown result")

    def getActiveBuddySubscriberIds(self):
        self.send_getActiveBuddySubscriberIds()
        return self.recv_getActiveBuddySubscriberIds()

    def send_getActiveBuddySubscriberIds(self):
        self._oprot.writeMessageBegin('getActiveBuddySubscriberIds', TMessageType.CALL, self._seqid)
        args = getActiveBuddySubscriberIds_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getActiveBuddySubscriberIds(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getActiveBuddySubscriberIds_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getActiveBuddySubscriberIds failed: unknown result")

    def getAllContactIds(self):
        self.send_getAllContactIds()
        return self.recv_getAllContactIds()

    def send_getAllContactIds(self):
        self._oprot.writeMessageBegin('getAllContactIds', TMessageType.CALL, self._seqid)
        args = getAllContactIds_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllContactIds(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllContactIds_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllContactIds failed: unknown result")

    def getAuthQrcode(self, keepLoggedIn, systemName):
        """
        Parameters:
         - keepLoggedIn
         - systemName
        """
        self.send_getAuthQrcode(keepLoggedIn, systemName)
        return self.recv_getAuthQrcode()

    def send_getAuthQrcode(self, keepLoggedIn, systemName):
        self._oprot.writeMessageBegin('getAuthQrcode', TMessageType.CALL, self._seqid)
        args = getAuthQrcode_args()
        args.keepLoggedIn = keepLoggedIn
        args.systemName = systemName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAuthQrcode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAuthQrcode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAuthQrcode failed: unknown result")

    def getBlockedContactIds(self):
        self.send_getBlockedContactIds()
        return self.recv_getBlockedContactIds()

    def send_getBlockedContactIds(self):
        self._oprot.writeMessageBegin('getBlockedContactIds', TMessageType.CALL, self._seqid)
        args = getBlockedContactIds_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getBlockedContactIds(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getBlockedContactIds_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getBlockedContactIds failed: unknown result")

    def registerWithPhoneNumber(self, sessionId, migrationPincodeSessio…