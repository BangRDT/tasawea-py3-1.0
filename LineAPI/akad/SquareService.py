#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def getSquareChatAnnouncements(self, request):
        """
        Parameters:
         - request
        """
        pass

    def deleteSquareChatAnnouncement(self, request):
        """
        Parameters:
         - request
        """
        pass

    def createSquareChatAnnouncement(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getNoteStatus(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquareStatus(self, request):
        """
        Parameters:
         - request
        """
        pass

    def reportSquareMember(self, request):
        """
        Parameters:
         - request
        """
        pass

    def reportSquareMessage(self, request):
        """
        Parameters:
         - request
        """
        pass

    def reportSquareChat(self, request):
        """
        Parameters:
         - request
        """
        pass

    def reportSquare(self, request):
        """
        Parameters:
         - request
        """
        pass

    def updateSquareMemberRelation(self, request):
        """
        Parameters:
         - request
        """
        pass

    def updateSquareAuthority(self, request):
        """
        Parameters:
         - request
        """
        pass

    def updateSquareChatMember(self, request):
        """
        Parameters:
         - request
        """
        pass

    def updateSquareChat(self, request):
        """
        Parameters:
         - request
        """
        pass

    def refreshSubscriptions(self, request):
        """
        Parameters:
         - request
        """
        pass

    def removeSubscriptions(self, request):
        """
        Parameters:
         - request
        """
        pass

    def rejectSquareMembers(self, request):
        """
        Parameters:
         - request
        """
        pass

    def updateSquareMembers(self, request):
        """
        Parameters:
         - request
        """
        pass

    def updateSquareMember(self, request):
        """
        Parameters:
         - request
        """
        pass

    def updateSquareFeatureSet(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquareFeatureSet(self, request):
        """
        Parameters:
         - request
        """
        pass

    def searchSquares(self, request):
        """
        Parameters:
         - request
        """
        pass

    def updateSquare(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getCategories(self, request):
        """
        Parameters:
         - request
        """
        pass

    def searchSquareMembers(self, request):
        """
        Parameters:
         - request
        """
        pass

    def fetchSquareChatEvents(self, request):
        """
        Parameters:
         - request
        """
        pass

    def fetchMyEvents(self, request):
        """
        Parameters:
         - request
        """
        pass

    def markAsRead(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquareAuthority(self, request):
        """
        Parameters:
         - request
        """
        pass

    def sendMessage(self, request):
        """
        Parameters:
         - request
        """
        pass

    def leaveSquare(self, request):
        """
        Parameters:
         - request
        """
        pass

    def leaveSquareChat(self, request):
        """
        Parameters:
         - request
        """
        pass

    def joinSquareChat(self, request):
        """
        Parameters:
         - request
        """
        pass

    def joinSquare(self, request):
        """
        Parameters:
         - request
        """
        pass

    def inviteToSquare(self, request):
        """
        Parameters:
         - request
        """
        pass

    def inviteToSquareChat(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquareMember(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquareMembers(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquareMemberRelation(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquareMemberRelations(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquareChatMembers(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquareChatStatus(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquareChat(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getSquare(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getJoinedSquares(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getJoinedSquareChats(self, request):
        """
        Parameters:
         - request
        """
        pass

    def approveSquareMembers(self, request):
        """
        Parameters:
         - request
        """
        pass

    def createSquareChat(self, request):
        """
        Parameters:
         - request
        """
        pass

    def createSquare(self, request):
        """
        Parameters:
         - request
        """
        pass

    def deleteSquareChat(self, request):
        """
        Parameters:
         - request
        """
        pass

    def deleteSquare(self, request):
        """
        Parameters:
         - request
        """
        pass

    def destroyMessage(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getJoinableSquareChats(self, request):
        """
        Parameters:
         - request
        """
        pass

    def getInvitationTicketUrl(self, request):
        """
        Parameters:
         - request
        """
        pass

    def findSquareByInvitationTicket(self, request):
        """
        Parameters:
         - request
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def getSquareChatAnnouncements(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareChatAnnouncements(request)
        return self.recv_getSquareChatAnnouncements()

    def send_getSquareChatAnnouncements(self, request):
        self._oprot.writeMessageBegin('getSquareChatAnnouncements', TMessageType.CALL, self._seqid)
        args = getSquareChatAnnouncements_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareChatAnnouncements(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareChatAnnouncements_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareChatAnnouncements failed: unknown result")

    def deleteSquareChatAnnouncement(self, request):
        """
        Parameters:
         - request
        """
        self.send_deleteSquareChatAnnouncement(request)
        return self.recv_deleteSquareChatAnnouncement()

    def send_deleteSquareChatAnnouncement(self, request):
        self._oprot.writeMessageBegin('deleteSquareChatAnnouncement', TMessageType.CALL, self._seqid)
        args = deleteSquareChatAnnouncement_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteSquareChatAnnouncement(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteSquareChatAnnouncement_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteSquareChatAnnouncement failed: unknown result")

    def createSquareChatAnnouncement(self, request):
        """
        Parameters:
         - request
        """
        self.send_createSquareChatAnnouncement(request)
        return self.recv_createSquareChatAnnouncement()

    def send_createSquareChatAnnouncement(self, request):
        self._oprot.writeMessageBegin('createSquareChatAnnouncement', TMessageType.CALL, self._seqid)
        args = createSquareChatAnnouncement_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createSquareChatAnnouncement(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createSquareChatAnnouncement_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createSquareChatAnnouncement failed: unknown result")

    def getNoteStatus(self, request):
        """
        Parameters:
         - request
        """
        self.send_getNoteStatus(request)
        return self.recv_getNoteStatus()

    def send_getNoteStatus(self, request):
        self._oprot.writeMessageBegin('getNoteStatus', TMessageType.CALL, self._seqid)
        args = getNoteStatus_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getNoteStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getNoteStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getNoteStatus failed: unknown result")

    def getSquareStatus(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareStatus(request)
        return self.recv_getSquareStatus()

    def send_getSquareStatus(self, request):
        self._oprot.writeMessageBegin('getSquareStatus', TMessageType.CALL, self._seqid)
        args = getSquareStatus_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareStatus failed: unknown result")

    def reportSquareMember(self, request):
        """
        Parameters:
         - request
        """
        self.send_reportSquareMember(request)
        return self.recv_reportSquareMember()

    def send_reportSquareMember(self, request):
        self._oprot.writeMessageBegin('reportSquareMember', TMessageType.CALL, self._seqid)
        args = reportSquareMember_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reportSquareMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reportSquareMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "reportSquareMember failed: unknown result")

    def reportSquareMessage(self, request):
        """
        Parameters:
         - request
        """
        self.send_reportSquareMessage(request)
        return self.recv_reportSquareMessage()

    def send_reportSquareMessage(self, request):
        self._oprot.writeMessageBegin('reportSquareMessage', TMessageType.CALL, self._seqid)
        args = reportSquareMessage_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reportSquareMessage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reportSquareMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "reportSquareMessage failed: unknown result")

    def reportSquareChat(self, request):
        """
        Parameters:
         - request
        """
        self.send_reportSquareChat(request)
        return self.recv_reportSquareChat()

    def send_reportSquareChat(self, request):
        self._oprot.writeMessageBegin('reportSquareChat', TMessageType.CALL, self._seqid)
        args = reportSquareChat_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reportSquareChat(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reportSquareChat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "reportSquareChat failed: unknown result")

    def reportSquare(self, request):
        """
        Parameters:
         - request
        """
        self.send_reportSquare(request)
        return self.recv_reportSquare()

    def send_reportSquare(self, request):
        self._oprot.writeMessageBegin('reportSquare', TMessageType.CALL, self._seqid)
        args = reportSquare_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reportSquare(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reportSquare_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "reportSquare failed: unknown result")

    def updateSquareMemberRelation(self, request):
        """
        Parameters:
         - request
        """
        self.send_updateSquareMemberRelation(request)
        return self.recv_updateSquareMemberRelation()

    def send_updateSquareMemberRelation(self, request):
        self._oprot.writeMessageBegin('updateSquareMemberRelation', TMessageType.CALL, self._seqid)
        args = updateSquareMemberRelation_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateSquareMemberRelation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateSquareMemberRelation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateSquareMemberRelation failed: unknown result")

    def updateSquareAuthority(self, request):
        """
        Parameters:
         - request
        """
        self.send_updateSquareAuthority(request)
        return self.recv_updateSquareAuthority()

    def send_updateSquareAuthority(self, request):
        self._oprot.writeMessageBegin('updateSquareAuthority', TMessageType.CALL, self._seqid)
        args = updateSquareAuthority_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateSquareAuthority(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateSquareAuthority_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateSquareAuthority failed: unknown result")

    def updateSquareChatMember(self, request):
        """
        Parameters:
         - request
        """
        self.send_updateSquareChatMember(request)
        return self.recv_updateSquareChatMember()

    def send_updateSquareChatMember(self, request):
        self._oprot.writeMessageBegin('updateSquareChatMember', TMessageType.CALL, self._seqid)
        args = updateSquareChatMember_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateSquareChatMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateSquareChatMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateSquareChatMember failed: unknown result")

    def updateSquareChat(self, request):
        """
        Parameters:
         - request
        """
        self.send_updateSquareChat(request)
        return self.recv_updateSquareChat()

    def send_updateSquareChat(self, request):
        self._oprot.writeMessageBegin('updateSquareChat', TMessageType.CALL, self._seqid)
        args = updateSquareChat_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateSquareChat(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateSquareChat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateSquareChat failed: unknown result")

    def refreshSubscriptions(self, request):
        """
        Parameters:
         - request
        """
        self.send_refreshSubscriptions(request)
        return self.recv_refreshSubscriptions()

    def send_refreshSubscriptions(self, request):
        self._oprot.writeMessageBegin('refreshSubscriptions', TMessageType.CALL, self._seqid)
        args = refreshSubscriptions_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_refreshSubscriptions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = refreshSubscriptions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "refreshSubscriptions failed: unknown result")

    def removeSubscriptions(self, request):
        """
        Parameters:
         - request
        """
        self.send_removeSubscriptions(request)
        return self.recv_removeSubscriptions()

    def send_removeSubscriptions(self, request):
        self._oprot.writeMessageBegin('removeSubscriptions', TMessageType.CALL, self._seqid)
        args = removeSubscriptions_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeSubscriptions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeSubscriptions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "removeSubscriptions failed: unknown result")

    def rejectSquareMembers(self, request):
        """
        Parameters:
         - request
        """
        self.send_rejectSquareMembers(request)
        return self.recv_rejectSquareMembers()

    def send_rejectSquareMembers(self, request):
        self._oprot.writeMessageBegin('rejectSquareMembers', TMessageType.CALL, self._seqid)
        args = rejectSquareMembers_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_rejectSquareMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = rejectSquareMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "rejectSquareMembers failed: unknown result")

    def updateSquareMembers(self, request):
        """
        Parameters:
         - request
        """
        self.send_updateSquareMembers(request)
        return self.recv_updateSquareMembers()

    def send_updateSquareMembers(self, request):
        self._oprot.writeMessageBegin('updateSquareMembers', TMessageType.CALL, self._seqid)
        args = updateSquareMembers_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateSquareMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateSquareMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateSquareMembers failed: unknown result")

    def updateSquareMember(self, request):
        """
        Parameters:
         - request
        """
        self.send_updateSquareMember(request)
        return self.recv_updateSquareMember()

    def send_updateSquareMember(self, request):
        self._oprot.writeMessageBegin('updateSquareMember', TMessageType.CALL, self._seqid)
        args = updateSquareMember_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateSquareMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateSquareMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateSquareMember failed: unknown result")

    def updateSquareFeatureSet(self, request):
        """
        Parameters:
         - request
        """
        self.send_updateSquareFeatureSet(request)
        return self.recv_updateSquareFeatureSet()

    def send_updateSquareFeatureSet(self, request):
        self._oprot.writeMessageBegin('updateSquareFeatureSet', TMessageType.CALL, self._seqid)
        args = updateSquareFeatureSet_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateSquareFeatureSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateSquareFeatureSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateSquareFeatureSet failed: unknown result")

    def getSquareFeatureSet(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareFeatureSet(request)
        return self.recv_getSquareFeatureSet()

    def send_getSquareFeatureSet(self, request):
        self._oprot.writeMessageBegin('getSquareFeatureSet', TMessageType.CALL, self._seqid)
        args = getSquareFeatureSet_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareFeatureSet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareFeatureSet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareFeatureSet failed: unknown result")

    def searchSquares(self, request):
        """
        Parameters:
         - request
        """
        self.send_searchSquares(request)
        return self.recv_searchSquares()

    def send_searchSquares(self, request):
        self._oprot.writeMessageBegin('searchSquares', TMessageType.CALL, self._seqid)
        args = searchSquares_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_searchSquares(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = searchSquares_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "searchSquares failed: unknown result")

    def updateSquare(self, request):
        """
        Parameters:
         - request
        """
        self.send_updateSquare(request)
        return self.recv_updateSquare()

    def send_updateSquare(self, request):
        self._oprot.writeMessageBegin('updateSquare', TMessageType.CALL, self._seqid)
        args = updateSquare_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateSquare(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateSquare_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateSquare failed: unknown result")

    def getCategories(self, request):
        """
        Parameters:
         - request
        """
        self.send_getCategories(request)
        return self.recv_getCategories()

    def send_getCategories(self, request):
        self._oprot.writeMessageBegin('getCategories', TMessageType.CALL, self._seqid)
        args = getCategories_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCategories(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCategories_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCategories failed: unknown result")

    def searchSquareMembers(self, request):
        """
        Parameters:
         - request
        """
        self.send_searchSquareMembers(request)
        return self.recv_searchSquareMembers()

    def send_searchSquareMembers(self, request):
        self._oprot.writeMessageBegin('searchSquareMembers', TMessageType.CALL, self._seqid)
        args = searchSquareMembers_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_searchSquareMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = searchSquareMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "searchSquareMembers failed: unknown result")

    def fetchSquareChatEvents(self, request):
        """
        Parameters:
         - request
        """
        self.send_fetchSquareChatEvents(request)
        return self.recv_fetchSquareChatEvents()

    def send_fetchSquareChatEvents(self, request):
        self._oprot.writeMessageBegin('fetchSquareChatEvents', TMessageType.CALL, self._seqid)
        args = fetchSquareChatEvents_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetchSquareChatEvents(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetchSquareChatEvents_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetchSquareChatEvents failed: unknown result")

    def fetchMyEvents(self, request):
        """
        Parameters:
         - request
        """
        self.send_fetchMyEvents(request)
        return self.recv_fetchMyEvents()

    def send_fetchMyEvents(self, request):
        self._oprot.writeMessageBegin('fetchMyEvents', TMessageType.CALL, self._seqid)
        args = fetchMyEvents_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetchMyEvents(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetchMyEvents_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetchMyEvents failed: unknown result")

    def markAsRead(self, request):
        """
        Parameters:
         - request
        """
        self.send_markAsRead(request)
        return self.recv_markAsRead()

    def send_markAsRead(self, request):
        self._oprot.writeMessageBegin('markAsRead', TMessageType.CALL, self._seqid)
        args = markAsRead_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_markAsRead(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = markAsRead_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "markAsRead failed: unknown result")

    def getSquareAuthority(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareAuthority(request)
        return self.recv_getSquareAuthority()

    def send_getSquareAuthority(self, request):
        self._oprot.writeMessageBegin('getSquareAuthority', TMessageType.CALL, self._seqid)
        args = getSquareAuthority_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareAuthority(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareAuthority_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareAuthority failed: unknown result")

    def sendMessage(self, request):
        """
        Parameters:
         - request
        """
        self.send_sendMessage(request)
        return self.recv_sendMessage()

    def send_sendMessage(self, request):
        self._oprot.writeMessageBegin('sendMessage', TMessageType.CALL, self._seqid)
        args = sendMessage_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sendMessage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sendMessage failed: unknown result")

    def leaveSquare(self, request):
        """
        Parameters:
         - request
        """
        self.send_leaveSquare(request)
        return self.recv_leaveSquare()

    def send_leaveSquare(self, request):
        self._oprot.writeMessageBegin('leaveSquare', TMessageType.CALL, self._seqid)
        args = leaveSquare_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_leaveSquare(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = leaveSquare_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "leaveSquare failed: unknown result")

    def leaveSquareChat(self, request):
        """
        Parameters:
         - request
        """
        self.send_leaveSquareChat(request)
        return self.recv_leaveSquareChat()

    def send_leaveSquareChat(self, request):
        self._oprot.writeMessageBegin('leaveSquareChat', TMessageType.CALL, self._seqid)
        args = leaveSquareChat_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_leaveSquareChat(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = leaveSquareChat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "leaveSquareChat failed: unknown result")

    def joinSquareChat(self, request):
        """
        Parameters:
         - request
        """
        self.send_joinSquareChat(request)
        return self.recv_joinSquareChat()

    def send_joinSquareChat(self, request):
        self._oprot.writeMessageBegin('joinSquareChat', TMessageType.CALL, self._seqid)
        args = joinSquareChat_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_joinSquareChat(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = joinSquareChat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "joinSquareChat failed: unknown result")

    def joinSquare(self, request):
        """
        Parameters:
         - request
        """
        self.send_joinSquare(request)
        return self.recv_joinSquare()

    def send_joinSquare(self, request):
        self._oprot.writeMessageBegin('joinSquare', TMessageType.CALL, self._seqid)
        args = joinSquare_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_joinSquare(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = joinSquare_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "joinSquare failed: unknown result")

    def inviteToSquare(self, request):
        """
        Parameters:
         - request
        """
        self.send_inviteToSquare(request)
        return self.recv_inviteToSquare()

    def send_inviteToSquare(self, request):
        self._oprot.writeMessageBegin('inviteToSquare', TMessageType.CALL, self._seqid)
        args = inviteToSquare_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_inviteToSquare(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = inviteToSquare_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "inviteToSquare failed: unknown result")

    def inviteToSquareChat(self, request):
        """
        Parameters:
         - request
        """
        self.send_inviteToSquareChat(request)
        return self.recv_inviteToSquareChat()

    def send_inviteToSquareChat(self, request):
        self._oprot.writeMessageBegin('inviteToSquareChat', TMessageType.CALL, self._seqid)
        args = inviteToSquareChat_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_inviteToSquareChat(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = inviteToSquareChat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "inviteToSquareChat failed: unknown result")

    def getSquareMember(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareMember(request)
        return self.recv_getSquareMember()

    def send_getSquareMember(self, request):
        self._oprot.writeMessageBegin('getSquareMember', TMessageType.CALL, self._seqid)
        args = getSquareMember_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareMember failed: unknown result")

    def getSquareMembers(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareMembers(request)
        return self.recv_getSquareMembers()

    def send_getSquareMembers(self, request):
        self._oprot.writeMessageBegin('getSquareMembers', TMessageType.CALL, self._seqid)
        args = getSquareMembers_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareMembers failed: unknown result")

    def getSquareMemberRelation(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareMemberRelation(request)
        return self.recv_getSquareMemberRelation()

    def send_getSquareMemberRelation(self, request):
        self._oprot.writeMessageBegin('getSquareMemberRelation', TMessageType.CALL, self._seqid)
        args = getSquareMemberRelation_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareMemberRelation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareMemberRelation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareMemberRelation failed: unknown result")

    def getSquareMemberRelations(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareMemberRelations(request)
        return self.recv_getSquareMemberRelations()

    def send_getSquareMemberRelations(self, request):
        self._oprot.writeMessageBegin('getSquareMemberRelations', TMessageType.CALL, self._seqid)
        args = getSquareMemberRelations_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareMemberRelations(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareMemberRelations_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareMemberRelations failed: unknown result")

    def getSquareChatMembers(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareChatMembers(request)
        return self.recv_getSquareChatMembers()

    def send_getSquareChatMembers(self, request):
        self._oprot.writeMessageBegin('getSquareChatMembers', TMessageType.CALL, self._seqid)
        args = getSquareChatMembers_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareChatMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareChatMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareChatMembers failed: unknown result")

    def getSquareChatStatus(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareChatStatus(request)
        return self.recv_getSquareChatStatus()

    def send_getSquareChatStatus(self, request):
        self._oprot.writeMessageBegin('getSquareChatStatus', TMessageType.CALL, self._seqid)
        args = getSquareChatStatus_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareChatStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareChatStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareChatStatus failed: unknown result")

    def getSquareChat(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquareChat(request)
        return self.recv_getSquareChat()

    def send_getSquareChat(self, request):
        self._oprot.writeMessageBegin('getSquareChat', TMessageType.CALL, self._seqid)
        args = getSquareChat_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquareChat(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquareChat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquareChat failed: unknown result")

    def getSquare(self, request):
        """
        Parameters:
         - request
        """
        self.send_getSquare(request)
        return self.recv_getSquare()

    def send_getSquare(self, request):
        self._oprot.writeMessageBegin('getSquare', TMessageType.CALL, self._seqid)
        args = getSquare_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSquare(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSquare_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSquare failed: unknown result")

    def getJoinedSquares(self, request):
        """
        Parameters:
         - request
        """
        self.send_getJoinedSquares(request)
        return self.recv_getJoinedSquares()

    def send_getJoinedSquares(self, request):
        self._oprot.writeMessageBegin('getJoinedSquares', TMessageType.CALL, self._seqid)
        args = getJoinedSquares_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getJoinedSquares(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getJoinedSquares_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getJoinedSquares failed: unknown result")

    def getJoinedSquareChats(self, request):
        """
        Parameters:
         - request
        """
        self.send_getJoinedSquareChats(request)
        return self.recv_getJoinedSquareChats()

    def send_getJoinedSquareChats(self, request):
        self._oprot.writeMessageBegin('getJoinedSquareChats', TMessageType.CALL, self._seqid)
        args = getJoinedSquareChats_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getJoinedSquareChats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getJoinedSquareChats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getJoinedSquareChats failed: unknown result")

    def approveSquareMembers(self, request):
        """
        Parameters:
         - request
        """
        self.send_approveSquareMembers(request)
        return self.recv_approveSquareMembers()

    def send_approveSquareMembers(self, request):
        self._oprot.writeMessageBegin('approveSquareMembers', TMessageType.CALL, self._seqid)
        args = approveSquareMembers_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_approveSquareMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = approveSquareMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "approveSquareMembers failed: unknown result")

    def createSquareChat(self, request):
        """
        Parameters:
         - request
        """
        self.send_createSquareChat(request)
        return self.recv_createSquareChat()

    def send_createSquareChat(self, request):
        self._oprot.writeMessageBegin('createSquareChat', TMessageType.CALL, self._seqid)
        args = createSquareChat_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createSquareChat(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createSquareChat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createSquareChat failed: unknown result")

    def createSquare(self, request):
        """
        Parameters:
         - request
        """
        self.send_createSquare(request)
        return self.recv_createSquare()

    def send_createSquare(self, request):
        self._oprot.writeMessageBegin('createSquare', TMessageType.CALL, self._seqid)
        args = createSquare_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createSquare(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createSquare_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createSquare failed: unknown result")

    def deleteSquareChat(self, request):
        """
        Parameters:
         - request
        """
        self.send_deleteSquareChat(request)
        return self.recv_deleteSquareChat()

    def send_deleteSquareChat(self, request):
        self._oprot.writeMessageBegin('deleteSquareChat', TMessageType.CALL, self._seqid)
        args = deleteSquareChat_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteSquareChat(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteSquareChat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteSquareChat failed: unknown result")

    def deleteSquare(self, request):
        """
        Parameters:
         - request
        """
        self.send_deleteSquare(request)
        return self.recv_deleteSquare()

    def send_deleteSquare(self, request):
        self._oprot.writeMessageBegin('deleteSquare', TMessageType.CALL, self._seqid)
        args = deleteSquare_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteSquare(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteSquare_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteSquare failed: unknown result")

    def destroyMessage(self, request):
        """
        Parameters:
         - request
        """
        self.send_destroyMessage(request)
        return self.recv_destroyMessage()

    def send_destroyMessage(self, request):
        self._oprot.writeMessageBegin('destroyMessage', TMessageType.CALL, self._seqid)
        args = destroyMessage_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_destroyMessage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = destroyMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "destroyMessage failed: unknown result")

    def getJoinableSquareChats(self, request):
        """
        Parameters:
         - request
        """
        self.send_getJoinableSquareChats(request)
        return self.recv_getJoinableSquareChats()

    def send_getJoinableSquareChats(self, request):
        self._oprot.writeMessageBegin('getJoinableSquareChats', TMessageType.CALL, self._seqid)
        args = getJoinableSquareChats_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getJoinableSquareChats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getJoinableSquareChats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getJoinableSquareChats failed: unknown result")

    def getInvitationTicketUrl(self, request):
        """
        Parameters:
         - request
        """
        self.send_getInvitationTicketUrl(request)
        return self.recv_getInvitationTicketUrl()

    def send_getInvitationTicketUrl(self, request):
        self._oprot.writeMessageBegin('getInvitationTicketUrl', TMessageType.CALL, self._seqid)
        args = getInvitationTicketUrl_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getInvitationTicketUrl(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getInvitationTicketUrl_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getInvitationTicketUrl failed: unknown result")

    def findSquareByInvitationTicket(self, request):
        """
        Parameters:
         - request
        """
        self.send_findSquareByInvitationTicket(request)
        return self.recv_findSquareByInvitationTicket()

    def send_findSquareByInvitationTicket(self, request):
        self._oprot.writeMessageBegin('findSquareByInvitationTicket', TMessageType.CALL, self._seqid)
        args = findSquareByInvitationTicket_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findSquareByInvitationTicket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findSquareByInvitationTicket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findSquareByInvitationTicket failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["getSquareChatAnnouncements"] = Processor.process_getSquareChatAnnouncements
        self._processMap["deleteSquareChatAnnouncement"] = Processor.process_deleteSquareChatAnnouncement
        self._processMap["createSquareChatAnnouncement"] = Processor.process_createSquareChatAnnouncement
        self._processMap["getNoteStatus"] = Processor.process_getNoteStatus
        self._processMap["getSquareStatus"] = Processor.process_getSquareStatus
        self._processMap["reportSquareMember"] = Processor.process_reportSquareMember
        self._processMap["reportSquareMessage"] = Processor.process_reportSquareMessage
        self._processMap["reportSquareChat"] = Processor.process_reportSquareChat
        self._processMap["reportSquare"] = Processor.process_reportSquare
        self._processMap["updateSquareMemberRelation"] = Processor.process_updateSquareMemberRelation
        self._processMap["updateSquareAuthority"] = Processor.process_updateSquareAuthority
        self._processMap["updateSquareChatMember"] = Processor.process_updateSquareChatMember
        self._processMap["updateSquareChat"] = Processor.process_updateSquareChat
        self._processMap["refreshSubscriptions"] = Processor.process_refreshSubscriptions
        self._processMap["removeSubscriptions"] = Processor.process_removeSubscriptions
        self._processMap["rejectSquareMembers"] = Processor.process_rejectSquareMembers
        self._processMap["updateSquareMembers"] = Processor.process_updateSquareMembers
        self._processMap["updateSquareMember"] = Processor.process_updateSquareMember
        self._processMap["updateSquareFeatureSet"] = Processor.process_updateSquareFeatureSet
        self._processMap["getSquareFeatureSet"] = Processor.process_getSquareFeatureSet
        self._processMap["searchSquares"] = Processor.process_searchSquares
        self._processMap["updateSquare"] = Processor.process_updateSquare
        self._processMap["getCategories"] = Processor.process_getCategories
        self._processMap["searchSquareMembers"] = Processor.process_searchSquareMembers
        self._processMap["fetchSquareChatEvents"] = Processor.process_fetchSquareChatEvents
        self._processMap["fetchMyEvents"] = Processor.process_fetchMyEvents
        self._processMap["markAsRead"] = Processor.process_markAsRead
        self._processMap["getSquareAuthority"] = Processor.process_getSquareAuthority
        self._processMap["sendMessage"] = Processor.process_sendMessage
        self._processMap["leaveSquare"] = Processor.process_leaveSquare
        self._processMap["leaveSquareChat"] = Processor.process_leaveSquareChat
        self._processMap["joinSquareChat"] = Processor.process_joinSquareChat
        self._processMap["joinSquare"] = Processor.process_joinSquare
        self._processMap["inviteToSquare"] = Processor.process_inviteToSquare
        self._processMap["inviteToSquareChat"] = Processor.process_inviteToSquareChat
        self._processMap["getSquareMember"] = Processor.process_getSquareMember
        self._processMap["getSquareMembers"] = Processor.process_getSquareMembers
        self._processMap["getSquareMemberRelation"] = Processor.process_getSquareMemberRelation
        self._processMap["getSquareMemberRelations"] = Processor.process_getSquareMemberRelations
        self._processMap["getSquareChatMembers"] = Processor.process_getSquareChatMembers
        self._processMap["getSquareChatStatus"] = Processor.process_getSquareChatStatus
        self._processMap["getSquareChat"] = Processor.process_getSquareChat
        self._processMap["getSquare"] = Processor.process_getSquare
        self._processMap["getJoinedSquares"] = Processor.process_getJoinedSquares
        self._processMap["getJoinedSquareChats"] = Processor.process_getJoinedSquareChats
        self._processMap["approveSquareMembers"] = Processor.process_approveSquareMembers
        self._processMap["createSquareChat"] = Processor.process_createSquareChat
        self._processMap["createSquare"] = Processor.process_createSquare
        self._processMap["deleteSquareChat"] = Processor.process_deleteSquareChat
        self._processMap["deleteSquare"] = Processor.process_deleteSquare
        self._processMap["destroyMessage"] = Processor.process_destroyMessage
        self._processMap["getJoinableSquareChats"] = Processor.process_getJoinableSquareChats
        self._processMap["getInvitationTicketUrl"] = Processor.process_getInvitationTicketUrl
        self._processMap["findSquareByInvitationTicket"] = Processor.process_findSquareByInvitationTicket

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_getSquareChatAnnouncements(self, seqid, iprot, oprot):
        args = getSquareChatAnnouncements_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getSquareChatAnnouncements_result()
        try:
            result.success = self._handler.getSquareChatAnnouncements(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getSquareChatAnnouncements", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteSquareChatAnnouncement(self, seqid, iprot, oprot):
        args = deleteSquareChatAnnouncement_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteSquareChatAnnouncement_result()
        try:
            result.success = self._handler.deleteSquareChatAnnouncement(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteSquareChatAnnouncement", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createSquareChatAnnouncement(self, seqid, iprot, oprot):
        args = createSquareChatAnnouncement_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createSquareChatAnnouncement_result()
        try:
            result.success = self._handler.createSquareChatAnnouncement(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createSquareChatAnnouncement", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getNoteStatus(self, seqid, iprot, oprot):
        args = getNoteStatus_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getNoteStatus_result()
        try:
            result.success = self._handler.getNoteStatus(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getNoteStatus", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getSquareStatus(self, seqid, iprot, oprot):
        args = getSquareStatus_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getSquareStatus_result()
        try:
            result.success = self._handler.getSquareStatus(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getSquareStatus", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_reportSquareMember(self, seqid, iprot, oprot):
        args = reportSquareMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reportSquareMember_result()
        try:
            result.success = self._handler.reportSquareMember(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("reportSquareMember", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_reportSquareMessage(self, seqid, iprot, oprot):
        args = reportSquareMessage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reportSquareMessage_result()
        try:
            result.success = self._handler.reportSquareMessage(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("reportSquareMessage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_reportSquareChat(self, seqid, iprot, oprot):
        args = reportSquareChat_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reportSquareChat_result()
        try:
            result.success = self._handler.reportSquareChat(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("reportSquareChat", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_reportSquare(self, seqid, iprot, oprot):
        args = reportSquare_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reportSquare_result()
        try:
            result.success = self._handler.reportSquare(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("reportSquare", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateSquareMemberRelation(self, seqid, iprot, oprot):
        args = updateSquareMemberRelation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateSquareMemberRelation_result()
        try:
            result.success = self._handler.updateSquareMemberRelation(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateSquareMemberRelation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateSquareAuthority(self, seqid, iprot, oprot):
        args = updateSquareAuthority_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateSquareAuthority_result()
        try:
            result.success = self._handler.updateSquareAuthority(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateSquareAuthority", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateSquareChatMember(self, seqid, iprot, oprot):
        args = updateSquareChatMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateSquareChatMember_result()
        try:
            result.success = self._handler.updateSquareChatMember(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateSquareChatMember", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateSquareChat(self, seqid, iprot, oprot):
        args = updateSquareChat_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateSquareChat_result()
        try:
            result.success = self._handler.updateSquareChat(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateSquareChat", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_refreshSubscriptions(self, seqid, iprot, oprot):
        args = refreshSubscriptions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = refreshSubscriptions_result()
        try:
            result.success = self._handler.refreshSubscriptions(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("refreshSubscriptions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_removeSubscriptions(self, seqid, iprot, oprot):
        args = removeSubscriptions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeSubscriptions_result()
        try:
            result.success = self._handler.removeSubscriptions(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("removeSubscriptions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_rejectSquareMembers(self, seqid, iprot, oprot):
        args = rejectSquareMembers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = rejectSquareMembers_result()
        try:
            result.success = self._handler.rejectSquareMembers(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("rejectSquareMembers", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateSquareMembers(self, seqid, iprot, oprot):
        args = updateSquareMembers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateSquareMembers_result()
        try:
            result.success = self._handler.updateSquareMembers(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateSquareMembers", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateSquareMember(self, seqid, iprot, oprot):
        args = updateSquareMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateSquareMember_result()
        try:
            result.success = self._handler.updateSquareMember(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateSquareMember", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateSquareFeatureSet(self, seqid, iprot, oprot):
        args = updateSquareFeatureSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateSquareFeatureSet_result()
        try:
            result.success = self._handler.updateSquareFeatureSet(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateSquareFeatureSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getSquareFeatureSet(self, seqid, iprot, oprot):
        args = getSquareFeatureSet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getSquareFeatureSet_result()
        try:
            result.success = self._handler.getSquareFeatureSet(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getSquareFeatureSet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_searchSquares(self, seqid, iprot, oprot):
        args = searchSquares_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = searchSquares_result()
        try:
            result.success = self._handler.searchSquares(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("searchSquares", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateSquare(self, seqid, iprot, oprot):
        args = updateSquare_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateSquare_result()
        try:
            result.success = self._handler.updateSquare(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateSquare", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCategories(self, seqid, iprot, oprot):
        args = getCategories_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCategories_result()
        try:
            result.success = self._handler.getCategories(args.request)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except SquareException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCategories", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_searchSquareMembers(self, se…