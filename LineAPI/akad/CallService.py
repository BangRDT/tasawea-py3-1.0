#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def getUserStatus(self, mid):
        """
        Parameters:
         - mid
        """
        pass

    def updateProfileAttributeForChannel(self, profileAttribute, value):
        """
        Parameters:
         - profileAttribute
         - value
        """
        pass

    def updateExtendedProfileAttribute(self, attr, extendedProfile):
        """
        Parameters:
         - attr
         - extendedProfile
        """
        pass

    def getAllSimpleChannelContacts(self, statusSticonFallbackDisabled):
        """
        Parameters:
         - statusSticonFallbackDisabled
        """
        pass

    def getUserIdentities(self):
        pass

    def markPaidCallAd(self, dialedNumber, language, disableCallerId):
        """
        Parameters:
         - dialedNumber
         - language
         - disableCallerId
        """
        pass

    def isGroupMember(self, groupId):
        """
        Parameters:
         - groupId
        """
        pass

    def getPhoneInfoFromPhoneNumber(self, region, phoneNumber):
        """
        Parameters:
         - region
         - phoneNumber
        """
        pass

    def redeemPaidCallVoucher(self, serial, language):
        """
        Parameters:
         - serial
         - language
        """
        pass

    def getPreferredDisplayName(self, mids):
        """
        Parameters:
         - mids
        """
        pass

    def getContactsForChannel(self, ids):
        """
        Parameters:
         - ids
        """
        pass

    def getCallCreditProducts(self, appStoreCode, pgCode, country, language):
        """
        Parameters:
         - appStoreCode
         - pgCode
         - country
         - language
        """
        pass

    def getCompactContacts(self, lastModifiedTimestamp):
        """
        Parameters:
         - lastModifiedTimestamp
        """
        pass

    def notifyNotiCenterEvent(self, event):
        """
        Parameters:
         - event
        """
        pass

    def isInContact(self, mid):
        """
        Parameters:
         - mid
        """
        pass

    def lookupGroupMembers(self, groupId, mids):
        """
        Parameters:
         - groupId
         - mids
        """
        pass

    def getRoomInformation(self, roomMid):
        """
        Parameters:
         - roomMid
        """
        pass

    def getGroupCall(self, chatMid):
        """
        Parameters:
         - chatMid
        """
        pass

    def isAllowSecondaryDeviceLogin(self):
        pass

    def getPrimaryClientForChannel(self):
        pass

    def createRoomWithBuddy(self, reqSeq, buddyMid, contactIds):
        """
        Parameters:
         - reqSeq
         - buddyMid
         - contactIds
        """
        pass

    def getDisplayName(self, mid):
        """
        Parameters:
         - mid
        """
        pass

    def getPaidCallMetadata(self, language):
        """
        Parameters:
         - language
        """
        pass

    def getMid(self):
        pass

    def getUserCountryForBilling(self, country, remoteIp):
        """
        Parameters:
         - country
         - remoteIp
        """
        pass

    def getFavoriteGroupIdsForChannel(self):
        pass

    def getPaidCallHistory(self, start, size, language):
        """
        Parameters:
         - start
         - size
         - language
        """
        pass

    def sendPinCodeOperation(self, verifier):
        """
        Parameters:
         - verifier
        """
        pass

    def inviteIntoGroupCall(self, chatMid, memberMids, mediaType):
        """
        Parameters:
         - chatMid
         - memberMids
         - mediaType
        """
        pass

    def getFriendMids(self):
        pass

    def getMetaProfile(self):
        pass

    def sendMessageForChannel(self, message):
        """
        Parameters:
         - message
        """
        pass

    def activeBuddySubscriberCount(self):
        pass

    def getCallCreditPurchaseHistory(self, request):
        """
        Parameters:
         - request
        """
        pass

    def isRoomMember(self, roomId):
        """
        Parameters:
         - roomId
        """
        pass

    def sendSystemOAMessage(self, message):
        """
        Parameters:
         - message
        """
        pass

    def acquirePaidCallRoute(self, paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId):
        """
        Parameters:
         - paidCallType
         - dialedNumber
         - language
         - networkCode
         - disableCallerId
         - referer
         - adSessionId
        """
        pass

    def getGroupsForChannel(self, groupIds):
        """
        Parameters:
         - groupIds
        """
        pass

    def getUserCreateTime(self):
        pass

    def registerChannelCP(self, cpId, registerPassword):
        """
        Parameters:
         - cpId
         - registerPassword
        """
        pass

    def reserveCallCreditPurchase(self, request):
        """
        Parameters:
         - request
        """
        pass

    def acquirePaidCallCurrencyExchangeRate(self, language):
        """
        Parameters:
         - language
        """
        pass

    def getRoomMemberMidsForAppPlatform(self, roomId):
        """
        Parameters:
         - roomId
        """
        pass

    def getPaidCallBalanceList(self, language):
        """
        Parameters:
         - language
        """
        pass

    def getPersonalInfos(self, requiredPersonalInfos):
        """
        Parameters:
         - requiredPersonalInfos
        """
        pass

    def getPrimaryClientsForChannel(self, userMids):
        """
        Parameters:
         - userMids
        """
        pass

    def addBuddyToContact(self, buddyMid):
        """
        Parameters:
         - buddyMid
        """
        pass

    def getGroupMemberMidsForAppPlatform(self, groupId):
        """
        Parameters:
         - groupId
        """
        pass

    def getUserLanguage(self):
        pass

    def lookupPaidCall(self, dialedNumber, language, referer):
        """
        Parameters:
         - dialedNumber
         - language
         - referer
        """
        pass

    def getExtendedProfile(self):
        pass

    def getReverseCompactContacts(self, ids):
        """
        Parameters:
         - ids
        """
        pass

    def getPaidCallAdStatus(self):
        pass

    def findContactByUseridWithoutAbuseBlockForChannel(self, userid):
        """
        Parameters:
         - userid
        """
        pass

    def getGroupMemberMids(self, groupId):
        """
        Parameters:
         - groupId
        """
        pass

    def sendMessageWithoutRelationship(self, message):
        """
        Parameters:
         - message
        """
        pass

    def displayBuddySubscriberCountInBulk(self, mids):
        """
        Parameters:
         - mids
        """
        pass

    def lookupRoomMembers(self, roomId, mids):
        """
        Parameters:
         - roomId
         - mids
        """
        pass

    def getFavoriteMidsForChannel(self):
        pass

    def getAllContactIdsForChannel(self):
        pass

    def displayBuddySubscriberCount(self):
        pass

    def getProfileForChannel(self):
        pass

    def getUserTickets(self, userMids):
        """
        Parameters:
         - userMids
        """
        pass

    def getOAFriendMids(self):
        pass

    def searchPaidCallUserRate(self, countryCode, language):
        """
        Parameters:
         - countryCode
         - language
        """
        pass

    def getJoinedGroupIdsForChannel(self):
        pass

    def acquireGroupCallRoute(self, chatMid, mediaType):
        """
        Parameters:
         - chatMid
         - mediaType
        """
        pass

    def getUserMidsWhoAddedMe(self):
        pass

    def getIdentityCredential(self):
        pass

    def addOperationForChannel(self, opType, param1, param2, param3):
        """
        Parameters:
         - opType
         - param1
         - param2
         - param3
        """
        pass

    def getSimpleChannelContacts(self, ids, statusSticonFallbackDisabled):
        """
        Parameters:
         - ids
         - statusSticonFallbackDisabled
        """
        pass

    def getUserLastSentMessageTimeStamp(self, mid):
        """
        Parameters:
         - mid
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def getUserStatus(self, mid):
        """
        Parameters:
         - mid
        """
        self.send_getUserStatus(mid)
        return self.recv_getUserStatus()

    def send_getUserStatus(self, mid):
        self._oprot.writeMessageBegin('getUserStatus', TMessageType.CALL, self._seqid)
        args = getUserStatus_args()
        args.mid = mid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserStatus failed: unknown result")

    def updateProfileAttributeForChannel(self, profileAttribute, value):
        """
        Parameters:
         - profileAttribute
         - value
        """
        self.send_updateProfileAttributeForChannel(profileAttribute, value)
        self.recv_updateProfileAttributeForChannel()

    def send_updateProfileAttributeForChannel(self, profileAttribute, value):
        self._oprot.writeMessageBegin('updateProfileAttributeForChannel', TMessageType.CALL, self._seqid)
        args = updateProfileAttributeForChannel_args()
        args.profileAttribute = profileAttribute
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateProfileAttributeForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateProfileAttributeForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def updateExtendedProfileAttribute(self, attr, extendedProfile):
        """
        Parameters:
         - attr
         - extendedProfile
        """
        self.send_updateExtendedProfileAttribute(attr, extendedProfile)
        self.recv_updateExtendedProfileAttribute()

    def send_updateExtendedProfileAttribute(self, attr, extendedProfile):
        self._oprot.writeMessageBegin('updateExtendedProfileAttribute', TMessageType.CALL, self._seqid)
        args = updateExtendedProfileAttribute_args()
        args.attr = attr
        args.extendedProfile = extendedProfile
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateExtendedProfileAttribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateExtendedProfileAttribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def getAllSimpleChannelContacts(self, statusSticonFallbackDisabled):
        """
        Parameters:
         - statusSticonFallbackDisabled
        """
        self.send_getAllSimpleChannelContacts(statusSticonFallbackDisabled)
        return self.recv_getAllSimpleChannelContacts()

    def send_getAllSimpleChannelContacts(self, statusSticonFallbackDisabled):
        self._oprot.writeMessageBegin('getAllSimpleChannelContacts', TMessageType.CALL, self._seqid)
        args = getAllSimpleChannelContacts_args()
        args.statusSticonFallbackDisabled = statusSticonFallbackDisabled
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllSimpleChannelContacts(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllSimpleChannelContacts_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllSimpleChannelContacts failed: unknown result")

    def getUserIdentities(self):
        self.send_getUserIdentities()
        return self.recv_getUserIdentities()

    def send_getUserIdentities(self):
        self._oprot.writeMessageBegin('getUserIdentities', TMessageType.CALL, self._seqid)
        args = getUserIdentities_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserIdentities(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserIdentities_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserIdentities failed: unknown result")

    def markPaidCallAd(self, dialedNumber, language, disableCallerId):
        """
        Parameters:
         - dialedNumber
         - language
         - disableCallerId
        """
        self.send_markPaidCallAd(dialedNumber, language, disableCallerId)
        return self.recv_markPaidCallAd()

    def send_markPaidCallAd(self, dialedNumber, language, disableCallerId):
        self._oprot.writeMessageBegin('markPaidCallAd', TMessageType.CALL, self._seqid)
        args = markPaidCallAd_args()
        args.dialedNumber = dialedNumber
        args.language = language
        args.disableCallerId = disableCallerId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_markPaidCallAd(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = markPaidCallAd_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "markPaidCallAd failed: unknown result")

    def isGroupMember(self, groupId):
        """
        Parameters:
         - groupId
        """
        self.send_isGroupMember(groupId)
        return self.recv_isGroupMember()

    def send_isGroupMember(self, groupId):
        self._oprot.writeMessageBegin('isGroupMember', TMessageType.CALL, self._seqid)
        args = isGroupMember_args()
        args.groupId = groupId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isGroupMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isGroupMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isGroupMember failed: unknown result")

    def getPhoneInfoFromPhoneNumber(self, region, phoneNumber):
        """
        Parameters:
         - region
         - phoneNumber
        """
        self.send_getPhoneInfoFromPhoneNumber(region, phoneNumber)
        return self.recv_getPhoneInfoFromPhoneNumber()

    def send_getPhoneInfoFromPhoneNumber(self, region, phoneNumber):
        self._oprot.writeMessageBegin('getPhoneInfoFromPhoneNumber', TMessageType.CALL, self._seqid)
        args = getPhoneInfoFromPhoneNumber_args()
        args.region = region
        args.phoneNumber = phoneNumber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPhoneInfoFromPhoneNumber(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPhoneInfoFromPhoneNumber_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPhoneInfoFromPhoneNumber failed: unknown result")

    def redeemPaidCallVoucher(self, serial, language):
        """
        Parameters:
         - serial
         - language
        """
        self.send_redeemPaidCallVoucher(serial, language)
        return self.recv_redeemPaidCallVoucher()

    def send_redeemPaidCallVoucher(self, serial, language):
        self._oprot.writeMessageBegin('redeemPaidCallVoucher', TMessageType.CALL, self._seqid)
        args = redeemPaidCallVoucher_args()
        args.serial = serial
        args.language = language
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_redeemPaidCallVoucher(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = redeemPaidCallVoucher_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "redeemPaidCallVoucher failed: unknown result")

    def getPreferredDisplayName(self, mids):
        """
        Parameters:
         - mids
        """
        self.send_getPreferredDisplayName(mids)
        return self.recv_getPreferredDisplayName()

    def send_getPreferredDisplayName(self, mids):
        self._oprot.writeMessageBegin('getPreferredDisplayName', TMessageType.CALL, self._seqid)
        args = getPreferredDisplayName_args()
        args.mids = mids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPreferredDisplayName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPreferredDisplayName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPreferredDisplayName failed: unknown result")

    def getContactsForChannel(self, ids):
        """
        Parameters:
         - ids
        """
        self.send_getContactsForChannel(ids)
        return self.recv_getContactsForChannel()

    def send_getContactsForChannel(self, ids):
        self._oprot.writeMessageBegin('getContactsForChannel', TMessageType.CALL, self._seqid)
        args = getContactsForChannel_args()
        args.ids = ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getContactsForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getContactsForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getContactsForChannel failed: unknown result")

    def getCallCreditProducts(self, appStoreCode, pgCode, country, language):
        """
        Parameters:
         - appStoreCode
         - pgCode
         - country
         - language
        """
        self.send_getCallCreditProducts(appStoreCode, pgCode, country, language)
        return self.recv_getCallCreditProducts()

    def send_getCallCreditProducts(self, appStoreCode, pgCode, country, language):
        self._oprot.writeMessageBegin('getCallCreditProducts', TMessageType.CALL, self._seqid)
        args = getCallCreditProducts_args()
        args.appStoreCode = appStoreCode
        args.pgCode = pgCode
        args.country = country
        args.language = language
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCallCreditProducts(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCallCreditProducts_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCallCreditProducts failed: unknown result")

    def getCompactContacts(self, lastModifiedTimestamp):
        """
        Parameters:
         - lastModifiedTimestamp
        """
        self.send_getCompactContacts(lastModifiedTimestamp)
        return self.recv_getCompactContacts()

    def send_getCompactContacts(self, lastModifiedTimestamp):
        self._oprot.writeMessageBegin('getCompactContacts', TMessageType.CALL, self._seqid)
        args = getCompactContacts_args()
        args.lastModifiedTimestamp = lastModifiedTimestamp
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCompactContacts(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCompactContacts_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCompactContacts failed: unknown result")

    def notifyNotiCenterEvent(self, event):
        """
        Parameters:
         - event
        """
        self.send_notifyNotiCenterEvent(event)
        self.recv_notifyNotiCenterEvent()

    def send_notifyNotiCenterEvent(self, event):
        self._oprot.writeMessageBegin('notifyNotiCenterEvent', TMessageType.CALL, self._seqid)
        args = notifyNotiCenterEvent_args()
        args.event = event
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_notifyNotiCenterEvent(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = notifyNotiCenterEvent_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def isInContact(self, mid):
        """
        Parameters:
         - mid
        """
        self.send_isInContact(mid)
        return self.recv_isInContact()

    def send_isInContact(self, mid):
        self._oprot.writeMessageBegin('isInContact', TMessageType.CALL, self._seqid)
        args = isInContact_args()
        args.mid = mid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isInContact(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isInContact_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isInContact failed: unknown result")

    def lookupGroupMembers(self, groupId, mids):
        """
        Parameters:
         - groupId
         - mids
        """
        self.send_lookupGroupMembers(groupId, mids)
        return self.recv_lookupGroupMembers()

    def send_lookupGroupMembers(self, groupId, mids):
        self._oprot.writeMessageBegin('lookupGroupMembers', TMessageType.CALL, self._seqid)
        args = lookupGroupMembers_args()
        args.groupId = groupId
        args.mids = mids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_lookupGroupMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = lookupGroupMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "lookupGroupMembers failed: unknown result")

    def getRoomInformation(self, roomMid):
        """
        Parameters:
         - roomMid
        """
        self.send_getRoomInformation(roomMid)
        return self.recv_getRoomInformation()

    def send_getRoomInformation(self, roomMid):
        self._oprot.writeMessageBegin('getRoomInformation', TMessageType.CALL, self._seqid)
        args = getRoomInformation_args()
        args.roomMid = roomMid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRoomInformation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRoomInformation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRoomInformation failed: unknown result")

    def getGroupCall(self, chatMid):
        """
        Parameters:
         - chatMid
        """
        self.send_getGroupCall(chatMid)
        return self.recv_getGroupCall()

    def send_getGroupCall(self, chatMid):
        self._oprot.writeMessageBegin('getGroupCall', TMessageType.CALL, self._seqid)
        args = getGroupCall_args()
        args.chatMid = chatMid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getGroupCall(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getGroupCall_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getGroupCall failed: unknown result")

    def isAllowSecondaryDeviceLogin(self):
        self.send_isAllowSecondaryDeviceLogin()
        return self.recv_isAllowSecondaryDeviceLogin()

    def send_isAllowSecondaryDeviceLogin(self):
        self._oprot.writeMessageBegin('isAllowSecondaryDeviceLogin', TMessageType.CALL, self._seqid)
        args = isAllowSecondaryDeviceLogin_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isAllowSecondaryDeviceLogin(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isAllowSecondaryDeviceLogin_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isAllowSecondaryDeviceLogin failed: unknown result")

    def getPrimaryClientForChannel(self):
        self.send_getPrimaryClientForChannel()
        return self.recv_getPrimaryClientForChannel()

    def send_getPrimaryClientForChannel(self):
        self._oprot.writeMessageBegin('getPrimaryClientForChannel', TMessageType.CALL, self._seqid)
        args = getPrimaryClientForChannel_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPrimaryClientForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPrimaryClientForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPrimaryClientForChannel failed: unknown result")

    def createRoomWithBuddy(self, reqSeq, buddyMid, contactIds):
        """
        Parameters:
         - reqSeq
         - buddyMid
         - contactIds
        """
        self.send_createRoomWithBuddy(reqSeq, buddyMid, contactIds)
        return self.recv_createRoomWithBuddy()

    def send_createRoomWithBuddy(self, reqSeq, buddyMid, contactIds):
        self._oprot.writeMessageBegin('createRoomWithBuddy', TMessageType.CALL, self._seqid)
        args = createRoomWithBuddy_args()
        args.reqSeq = reqSeq
        args.buddyMid = buddyMid
        args.contactIds = contactIds
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createRoomWithBuddy(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createRoomWithBuddy_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createRoomWithBuddy failed: unknown result")

    def getDisplayName(self, mid):
        """
        Parameters:
         - mid
        """
        self.send_getDisplayName(mid)
        return self.recv_getDisplayName()

    def send_getDisplayName(self, mid):
        self._oprot.writeMessageBegin('getDisplayName', TMessageType.CALL, self._seqid)
        args = getDisplayName_args()
        args.mid = mid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDisplayName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDisplayName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDisplayName failed: unknown result")

    def getPaidCallMetadata(self, language):
        """
        Parameters:
         - language
        """
        self.send_getPaidCallMetadata(language)
        return self.recv_getPaidCallMetadata()

    def send_getPaidCallMetadata(self, language):
        self._oprot.writeMessageBegin('getPaidCallMetadata', TMessageType.CALL, self._seqid)
        args = getPaidCallMetadata_args()
        args.language = language
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPaidCallMetadata(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPaidCallMetadata_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPaidCallMetadata failed: unknown result")

    def getMid(self):
        self.send_getMid()
        return self.recv_getMid()

    def send_getMid(self):
        self._oprot.writeMessageBegin('getMid', TMessageType.CALL, self._seqid)
        args = getMid_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMid(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMid_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMid failed: unknown result")

    def getUserCountryForBilling(self, country, remoteIp):
        """
        Parameters:
         - country
         - remoteIp
        """
        self.send_getUserCountryForBilling(country, remoteIp)
        return self.recv_getUserCountryForBilling()

    def send_getUserCountryForBilling(self, country, remoteIp):
        self._oprot.writeMessageBegin('getUserCountryForBilling', TMessageType.CALL, self._seqid)
        args = getUserCountryForBilling_args()
        args.country = country
        args.remoteIp = remoteIp
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserCountryForBilling(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserCountryForBilling_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserCountryForBilling failed: unknown result")

    def getFavoriteGroupIdsForChannel(self):
        self.send_getFavoriteGroupIdsForChannel()
        return self.recv_getFavoriteGroupIdsForChannel()

    def send_getFavoriteGroupIdsForChannel(self):
        self._oprot.writeMessageBegin('getFavoriteGroupIdsForChannel', TMessageType.CALL, self._seqid)
        args = getFavoriteGroupIdsForChannel_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getFavoriteGroupIdsForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getFavoriteGroupIdsForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getFavoriteGroupIdsForChannel failed: unknown result")

    def getPaidCallHistory(self, start, size, language):
        """
        Parameters:
         - start
         - size
         - language
        """
        self.send_getPaidCallHistory(start, size, language)
        return self.recv_getPaidCallHistory()

    def send_getPaidCallHistory(self, start, size, language):
        self._oprot.writeMessageBegin('getPaidCallHistory', TMessageType.CALL, self._seqid)
        args = getPaidCallHistory_args()
        args.start = start
        args.size = size
        args.language = language
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPaidCallHistory(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPaidCallHistory_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPaidCallHistory failed: unknown result")

    def sendPinCodeOperation(self, verifier):
        """
        Parameters:
         - verifier
        """
        self.send_sendPinCodeOperation(verifier)
        self.recv_sendPinCodeOperation()

    def send_sendPinCodeOperation(self, verifier):
        self._oprot.writeMessageBegin('sendPinCodeOperation', TMessageType.CALL, self._seqid)
        args = sendPinCodeOperation_args()
        args.verifier = verifier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sendPinCodeOperation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendPinCodeOperation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def inviteIntoGroupCall(self, chatMid, memberMids, mediaType):
        """
        Parameters:
         - chatMid
         - memberMids
         - mediaType
        """
        self.send_inviteIntoGroupCall(chatMid, memberMids, mediaType)
        self.recv_inviteIntoGroupCall()

    def send_inviteIntoGroupCall(self, chatMid, memberMids, mediaType):
        self._oprot.writeMessageBegin('inviteIntoGroupCall', TMessageType.CALL, self._seqid)
        args = inviteIntoGroupCall_args()
        args.chatMid = chatMid
        args.memberMids = memberMids
        args.mediaType = mediaType
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_inviteIntoGroupCall(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = inviteIntoGroupCall_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def getFriendMids(self):
        self.send_getFriendMids()
        return self.recv_getFriendMids()

    def send_getFriendMids(self):
        self._oprot.writeMessageBegin('getFriendMids', TMessageType.CALL, self._seqid)
        args = getFriendMids_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getFriendMids(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getFriendMids_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getFriendMids failed: unknown result")

    def getMetaProfile(self):
        self.send_getMetaProfile()
        return self.recv_getMetaProfile()

    def send_getMetaProfile(self):
        self._oprot.writeMessageBegin('getMetaProfile', TMessageType.CALL, self._seqid)
        args = getMetaProfile_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMetaProfile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMetaProfile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMetaProfile failed: unknown result")

    def sendMessageForChannel(self, message):
        """
        Parameters:
         - message
        """
        self.send_sendMessageForChannel(message)
        return self.recv_sendMessageForChannel()

    def send_sendMessageForChannel(self, message):
        self._oprot.writeMessageBegin('sendMessageForChannel', TMessageType.CALL, self._seqid)
        args = sendMessageForChannel_args()
        args.message = message
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sendMessageForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendMessageForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sendMessageForChannel failed: unknown result")

    def activeBuddySubscriberCount(self):
        self.send_activeBuddySubscriberCount()
        return self.recv_activeBuddySubscriberCount()

    def send_activeBuddySubscriberCount(self):
        self._oprot.writeMessageBegin('activeBuddySubscriberCount', TMessageType.CALL, self._seqid)
        args = activeBuddySubscriberCount_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_activeBuddySubscriberCount(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = activeBuddySubscriberCount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "activeBuddySubscriberCount failed: unknown result")

    def getCallCreditPurchaseHistory(self, request):
        """
        Parameters:
         - request
        """
        self.send_getCallCreditPurchaseHistory(request)
        return self.recv_getCallCreditPurchaseHistory()

    def send_getCallCreditPurchaseHistory(self, request):
        self._oprot.writeMessageBegin('getCallCreditPurchaseHistory', TMessageType.CALL, self._seqid)
        args = getCallCreditPurchaseHistory_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCallCreditPurchaseHistory(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCallCreditPurchaseHistory_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCallCreditPurchaseHistory failed: unknown result")

    def isRoomMember(self, roomId):
        """
        Parameters:
         - roomId
        """
        self.send_isRoomMember(roomId)
        return self.recv_isRoomMember()

    def send_isRoomMember(self, roomId):
        self._oprot.writeMessageBegin('isRoomMember', TMessageType.CALL, self._seqid)
        args = isRoomMember_args()
        args.roomId = roomId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isRoomMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isRoomMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isRoomMember failed: unknown result")

    def sendSystemOAMessage(self, message):
        """
        Parameters:
         - message
        """
        self.send_sendSystemOAMessage(message)
        return self.recv_sendSystemOAMessage()

    def send_sendSystemOAMessage(self, message):
        self._oprot.writeMessageBegin('sendSystemOAMessage', TMessageType.CALL, self._seqid)
        args = sendSystemOAMessage_args()
        args.message = message
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sendSystemOAMessage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendSystemOAMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sendSystemOAMessage failed: unknown result")

    def acquirePaidCallRoute(self, paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId):
        """
        Parameters:
         - paidCallType
         - dialedNumber
         - language
         - networkCode
         - disableCallerId
         - referer
         - adSessionId
        """
        self.send_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId)
        return self.recv_acquirePaidCallRoute()

    def send_acquirePaidCallRoute(self, paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId):
        self._oprot.writeMessageBegin('acquirePaidCallRoute', TMessageType.CALL, self._seqid)
        args = acquirePaidCallRoute_args()
        args.paidCallType = paidCallType
        args.dialedNumber = dialedNumber
        args.language = language
        args.networkCode = networkCode
        args.disableCallerId = disableCallerId
        args.referer = referer
        args.adSessionId = adSessionId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_acquirePaidCallRoute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = acquirePaidCallRoute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "acquirePaidCallRoute failed: unknown result")

    def getGroupsForChannel(self, groupIds):
        """
        Parameters:
         - groupIds
        """
        self.send_getGroupsForChannel(groupIds)
        return self.recv_getGroupsForChannel()

    def send_getGroupsForChannel(self, groupIds):
        self._oprot.writeMessageBegin('getGroupsForChannel', TMessageType.CALL, self._seqid)
        args = getGroupsForChannel_args()
        args.groupIds = groupIds
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getGroupsForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getGroupsForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getGroupsForChannel failed: unknown result")

    def getUserCreateTime(self):
        self.send_getUserCreateTime()
        return self.recv_getUserCreateTime()

    def send_getUserCreateTime(self):
        self._oprot.writeMessageBegin('getUserCreateTime', TMessageType.CALL, self._seqid)
        args = getUserCreateTime_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserCreateTime(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserCreateTime_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserCreateTime failed: unknown result")

    def registerChannelCP(self, cpId, registerPassword):
        """
        Parameters:
         - cpId
         - registerPassword
        """
        self.send_registerChannelCP(cpId, registerPassword)
        return self.recv_registerChannelCP()

    def send_registerChannelCP(self, cpId, registerPassword):
        self._oprot.writeMessageBegin('registerChannelCP', TMessageType.CALL, self._seqid)
        args = registerChannelCP_args()
        args.cpId = cpId
        args.registerPassword = registerPassword
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_registerChannelCP(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = registerChannelCP_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "registerChannelCP failed: unknown result")

    def reserveCallCreditPurchase(self, request):
        """
        Parameters:
         - request
        """
        self.send_reserveCallCreditPurchase(request)
        return self.recv_reserveCallCreditPurchase()

    def send_reserveCallCreditPurchase(self, request):
        self._oprot.writeMessageBegin('reserveCallCreditPurchase', TMessageType.CALL, self._seqid)
        args = reserveCallCreditPurchase_args()
        args.request = request
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reserveCallCreditPurchase(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reserveCallCreditPurchase_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "reserveCallCreditPurchase failed: unknown result")

    def acquirePaidCallCurrencyExchangeRate(self, language):
        """
        Parameters:
         - language
        """
        self.send_acquirePaidCallCurrencyExchangeRate(language)
        return self.recv_acquirePaidCallCurrencyExchangeRate()

    def send_acquirePaidCallCurrencyExchangeRate(self, language):
        self._oprot.writeMessageBegin('acquirePaidCallCurrencyExchangeRate', TMessageType.CALL, self._seqid)
        args = acquirePaidCallCurrencyExchangeRate_args()
        args.language = language
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_acquirePaidCallCurrencyExchangeRate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = acquirePaidCallCurrencyExchangeRate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "acquirePaidCallCurrencyExchangeRate failed: unknown result")

    def getRoomMemberMidsForAppPlatform(self, roomId):
        """
        Parameters:
         - roomId
        """
        self.send_getRoomMemberMidsForAppPlatform(roomId)
        return self.recv_getRoomMemberMidsForAppPlatform()

    def send_getRoomMemberMidsForAppPlatform(self, roomId):
        self._oprot.writeMessageBegin('getRoomMemberMidsForAppPlatform', TMessageType.CALL, self._seqid)
        args = getRoomMemberMidsForAppPlatform_args()
        args.roomId = roomId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRoomMemberMidsForAppPlatform(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRoomMemberMidsForAppPlatform_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRoomMemberMidsForAppPlatform failed: unknown result")

    def getPaidCallBalanceList(self, language):
        """
        Parameters:
         - language
        """
        self.send_getPaidCallBalanceList(language)
        return self.recv_getPaidCallBalanceList()

    def send_getPaidCallBalanceList(self, language):
        self._oprot.writeMessageBegin('getPaidCallBalanceList', TMessageType.CALL, self._seqid)
        args = getPaidCallBalanceList_args()
        args.language = language
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPaidCallBalanceList(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPaidCallBalanceList_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPaidCallBalanceList failed: unknown result")

    def getPersonalInfos(self, requiredPersonalInfos):
        """
        Parameters:
         - requiredPersonalInfos
        """
        self.send_getPersonalInfos(requiredPersonalInfos)
        return self.recv_getPersonalInfos()

    def send_getPersonalInfos(self, requiredPersonalInfos):
        self._oprot.writeMessageBegin('getPersonalInfos', TMessageType.CALL, self._seqid)
        args = getPersonalInfos_args()
        args.requiredPersonalInfos = requiredPersonalInfos
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPersonalInfos(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPersonalInfos_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPersonalInfos failed: unknown result")

    def getPrimaryClientsForChannel(self, userMids):
        """
        Parameters:
         - userMids
        """
        self.send_getPrimaryClientsForChannel(userMids)
        return self.recv_getPrimaryClientsForChannel()

    def send_getPrimaryClientsForChannel(self, userMids):
        self._oprot.writeMessageBegin('getPrimaryClientsForChannel', TMessageType.CALL, self._seqid)
        args = getPrimaryClientsForChannel_args()
        args.userMids = userMids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPrimaryClientsForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPrimaryClientsForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPrimaryClientsForChannel failed: unknown result")

    def addBuddyToContact(self, buddyMid):
        """
        Parameters:
         - buddyMid
        """
        self.send_addBuddyToContact(buddyMid)
        return self.recv_addBuddyToContact()

    def send_addBuddyToContact(self, buddyMid):
        self._oprot.writeMessageBegin('addBuddyToContact', TMessageType.CALL, self._seqid)
        args = addBuddyToContact_args()
        args.buddyMid = buddyMid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addBuddyToContact(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addBuddyToContact_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "addBuddyToContact failed: unknown result")

    def getGroupMemberMidsForAppPlatform(self, groupId):
        """
        Parameters:
         - groupId
        """
        self.send_getGroupMemberMidsForAppPlatform(groupId)
        return self.recv_getGroupMemberMidsForAppPlatform()

    def send_getGroupMemberMidsForAppPlatform(self, groupId):
        self._oprot.writeMessageBegin('getGroupMemberMidsForAppPlatform', TMessageType.CALL, self._seqid)
        args = getGroupMemberMidsForAppPlatform_args()
        args.groupId = groupId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getGroupMemberMidsForAppPlatform(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getGroupMemberMidsForAppPlatform_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getGroupMemberMidsForAppPlatform failed: unknown result")

    def getUserLanguage(self):
        self.send_getUserLanguage()
        return self.recv_getUserLanguage()

    def send_getUserLanguage(self):
        self._oprot.writeMessageBegin('getUserLanguage', TMessageType.CALL, self._seqid)
        args = getUserLanguage_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserLanguage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserLanguage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserLanguage failed: unknown result")

    def lookupPaidCall(self, dialedNumber, language, referer):
        """
        Parameters:
         - dialedNumber
         - language
         - referer
        """
        self.send_lookupPaidCall(dialedNumber, language, referer)
        return self.recv_lookupPaidCall()

    def send_lookupPaidCall(self, dialedNumber, language, referer):
        self._oprot.writeMessageBegin('lookupPaidCall', TMessageType.CALL, self._seqid)
        args = lookupPaidCall_args()
        args.dialedNumber = dialedNumber
        args.language = language
        args.referer = referer
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_lookupPaidCall(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = lookupPaidCall_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "lookupPaidCall failed: unknown result")

    def getExtendedProfile(self):
        self.send_getExtendedProfile()
        return self.recv_getExtendedProfile()

    def send_getExtendedProfile(self):
        self._oprot.writeMessageBegin('getExtendedProfile', TMessageType.CALL, self._seqid)
        args = getExtendedProfile_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getExtendedProfile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getExtendedProfile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getExtendedProfile failed: unknown result")

    def getReverseCompactContacts(self, ids):
        """
        Parameters:
         - ids
        """
        self.send_getReverseCompactContacts(ids)
        return self.recv_getReverseCompactContacts()

    def send_getReverseCompactContacts(self, ids):
        self._oprot.writeMessageBegin('getReverseCompactContacts', TMessageType.CALL, self._seqid)
        args = getReverseCompactContacts_args()
        args.ids = ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getReverseCompactContacts(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getReverseCompactContacts_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getReverseCompactContacts failed: unknown result")

    def getPaidCallAdStatus(self):
        self.send_getPaidCallAdStatus()
        return self.recv_getPaidCallAdStatus()

    def send_getPaidCallAdStatus(self):
        self._oprot.writeMessageBegin('getPaidCallAdStatus', TMessageType.CALL, self._seqid)
        args = getPaidCallAdStatus_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPaidCallAdStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPaidCallAdStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPaidCallAdStatus failed: unknown result")

    def findContactByUseridWithoutAbuseBlockForChannel(self, userid):
        """
        Parameters:
         - userid
        """
        self.send_findContactByUseridWithoutAbuseBlockForChannel(userid)
        return self.recv_findContactByUseridWithoutAbuseBlockForChannel()

    def send_findContactByUseridWithoutAbuseBlockForChannel(self, userid):
        self._oprot.writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', TMessageType.CALL, self._seqid)
        args = findContactByUseridWithoutAbuseBlockForChannel_args()
        args.userid = userid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findContactByUseridWithoutAbuseBlockForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findContactByUseridWithoutAbuseBlockForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result")

    def getGroupMemberMids(self, groupId):
        """
        Parameters:
         - groupId
        """
        self.send_getGroupMemberMids(groupId)
        return self.recv_getGroupMemberMids()

    def send_getGroupMemberMids(self, groupId):
        self._oprot.writeMessageBegin('getGroupMemberMids', TMessageType.CALL, self._seqid)
        args = getGroupMemberMids_args()
        args.groupId = groupId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getGroupMemberMids(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getGroupMemberMids_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getGroupMemberMids failed: unknown result")

    def sendMessageWithoutRelationship(self, message):
        """
        Parameters:
         - message
        """
        self.send_sendMessageWithoutRelationship(message)
        return self.recv_sendMessageWithoutRelationship()

    def send_sendMessageWithoutRelationship(self, message):
        self._oprot.writeMessageBegin('sendMessageWithoutRelationship', TMessageType.CALL, self._seqid)
        args = sendMessageWithoutRelationship_args()
        args.message = message
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sendMessageWithoutRelationship(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendMessageWithoutRelationship_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sendMessageWithoutRelationship failed: unknown result")

    def displayBuddySubscriberCountInBulk(self, mids):
        """
        Parameters:
         - mids
        """
        self.send_displayBuddySubscriberCountInBulk(mids)
        return self.recv_displayBuddySubscriberCountInBulk()

    def send_displayBuddySubscriberCountInBulk(self, mids):
        self._oprot.writeMessageBegin('displayBuddySubscriberCountInBulk', TMessageType.CALL, self._seqid)
        args = displayBuddySubscriberCountInBulk_args()
        args.mids = mids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_displayBuddySubscriberCountInBulk(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = displayBuddySubscriberCountInBulk_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "displayBuddySubscriberCountInBulk failed: unknown result")

    def lookupRoomMembers(self, roomId, mids):
        """
        Parameters:
         - roomId
         - mids
        """
        self.send_lookupRoomMembers(roomId, mids)
        return self.recv_lookupRoomMembers()

    def send_lookupRoomMembers(self, roomId, mids):
        self._oprot.writeMessageBegin('lookupRoomMembers', TMessageType.CALL, self._seqid)
        args = lookupRoomMembers_args()
        args.roomId = roomId
        args.mids = mids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_lookupRoomMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = lookupRoomMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "lookupRoomMembers failed: unknown result")

    def getFavoriteMidsForChannel(self):
        self.send_getFavoriteMidsForChannel()
        return self.recv_getFavoriteMidsForChannel()

    def send_getFavoriteMidsForChannel(self):
        self._oprot.writeMessageBegin('getFavoriteMidsForChannel', TMessageType.CALL, self._seqid)
        args = getFavoriteMidsForChannel_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getFavoriteMidsForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getFavoriteMidsForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getFavoriteMidsForChannel failed: unknown result")

    def getAllContactIdsForChannel(self):
        self.send_getAllContactIdsForChannel()
        return self.recv_getAllContactIdsForChannel()

    def send_getAllContactIdsForChannel(self):
        self._oprot.writeMessageBegin('getAllContactIdsForChannel', TMessageType.CALL, self._seqid)
        args = getAllContactIdsForChannel_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllContactIdsForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllContactIdsForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllContactIdsForChannel failed: unknown result")

    def displayBuddySubscriberCount(self):
        self.send_displayBuddySubscriberCount()
        return self.recv_displayBuddySubscriberCount()

    def send_displayBuddySubscriberCount(self):
        self._oprot.writeMessageBegin('displayBuddySubscriberCount', TMessageType.CALL, self._seqid)
        args = displayBuddySubscriberCount_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_displayBuddySubscriberCount(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = displayBuddySubscriberCount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "displayBuddySubscriberCount failed: unknown result")

    def getProfileForChannel(self):
        self.send_getProfileForChannel()
        return self.recv_getProfileForChannel()

    def send_getProfileForChannel(self):
        self._oprot.writeMessageBegin('getProfileForChannel', TMessageType.CALL, self._seqid)
        args = getProfileForChannel_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getProfileForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getProfileForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getProfileForChannel failed: unknown result")

    def getUserTickets(self, userMids):
        """
        Parameters:
         - userMids
        """
        self.send_getUserTickets(userMids)
        return self.recv_getUserTickets()

    def send_getUserTickets(self, userMids):
        self._oprot.writeMessageBegin('getUserTickets', TMessageType.CALL, self._seqid)
        args = getUserTickets_args()
        args.userMids = userMids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserTickets(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserTickets_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserTickets failed: unknown result")

    def getOAFriendMids(self):
        self.send_getOAFriendMids()
        return self.recv_getOAFriendMids()

    def send_getOAFriendMids(self):
        self._oprot.writeMessageBegin('getOAFriendMids', TMessageType.CALL, self._seqid)
        args = getOAFriendMids_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getOAFriendMids(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getOAFriendMids_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getOAFriendMids failed: unknown result")

    def searchPaidCallUserRate(self, countryCode, language):
        """
        Parameters:
         - countryCode
         - language
        """
        self.send_searchPaidCallUserRate(countryCode, language)
        return self.recv_searchPaidCallUserRate()

    def send_searchPaidCallUserRate(self, countryCode, language):
        self._oprot.writeMessageBegin('searchPaidCallUserRate', TMessageType.CALL, self._seqid)
        args = searchPaidCallUserRate_args()
        args.countryCode = countryCode
        args.language = language
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_searchPaidCallUserRate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = searchPaidCallUserRate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "searchPaidCallUserRate failed: unknown result")

    def getJoinedGroupIdsForChannel(self):
        self.send_getJoinedGroupIdsForChannel()
        return self.recv_getJoinedGroupIdsForChannel()

    def send_getJoinedGroupIdsForChannel(self):
        self._oprot.writeMessageBegin('getJoinedGroupIdsForChannel', TMessageType.CALL, self._seqid)
        args = getJoinedGroupIdsForChannel_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getJoinedGroupIdsForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getJoinedGroupIdsForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getJoinedGroupIdsForChannel failed: unknown result")

    def acquireGroupCallRoute(self, chatMid, mediaType):
        """
        Parameters:
         - chatMid
         - mediaType
        """
        self.send_acquireGroupCallRoute(chatMid, mediaType)
        return self.recv_acquireGroupCallRoute()

    def send_acquireGroupCallRoute(self, chatMid, mediaType):
        self._oprot.writeMessageBegin('acquireGroupCallRoute', TMessageType.CALL, self._seqid)
        args = acquireGroupCallRoute_args()
        args.chatMid = chatMid
        args.mediaType = mediaType
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_acquireGroupCallRoute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = acquireGroupCallRoute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "acquireGroupCallRoute failed: unknown result")

    def getUserMidsWhoAddedMe(self):
        self.send_getUserMidsWhoAddedMe()
        return self.recv_getUserMidsWhoAddedMe()

    def send_getUserMidsWhoAddedMe(self):
        self._oprot.writeMessageBegin('getUserMidsWhoAddedMe', TMessageType.CALL, self._seqid)
        args = getUserMidsWhoAddedMe_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserMidsWhoAddedMe(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserMidsWhoAddedMe_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserMidsWhoAddedMe failed: unknown result")

    def getIdentityCredential(self):
        self.send_getIdentityCredential()
        return self.recv_getIdentityCredential()

    def send_getIdentityCredential(self):
        self._oprot.writeMessageBegin('getIdentityCredential', TMessageType.CALL, self._seqid)
        args = getIdentityCredential_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getIdentityCredential(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getIdentityCredential_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getIdentityCredential failed: unknown result")

    def addOperationForChannel(self, opType, param1, param2, param3):
        """
        Parameters:
         - opType
         - param1
         - param2
         - param3
        """
        self.send_addOperationForChannel(opType, param1, param2, param3)
        self.recv_addOperationForChannel()

    def send_addOperationForChannel(self, opType, param1, param2, param3):
        self._oprot.writeMessageBegin('addOperationForChannel', TMessageType.CALL, self._seqid)
        args = addOperationForChannel_args()
        args.opType = opType
        args.param1 = param1
        args.param2 = param2
        args.param3 = param3
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addOperationForChannel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addOperationForChannel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def getSimpleChannelContacts(self, ids, statusSticonFallbackDisabled):
        """
        Parameters:
         - ids
         - statusSticonFallbackDisabled
        """
        self.send_getSimpleChannelContacts(ids, statusSticonFallbackDisabled)
        return self.recv_getSimpleChannelContacts()

    def send_getSimpleChannelContacts(self, ids, statusSticonFallbackDisabled):
        self._oprot.writeMessageBegin('getSimpleChannelContacts', TMessageType.CALL, self._seqid)
        args = getSimpleChannelContacts_args()
        args.ids = ids
        args.statusSticonFallbackDisabled = statusSticonFallbackDisabled
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getSimpleChannelContacts(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSimpleChannelContacts_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSimpleChannelContacts failed: unknown result")

    def getUserLastSentMessageTimeStamp(self, mid):
        """
        Parameters:
         - mid
        """
        self.send_getUserLastSentMessageTimeStamp(mid)
        return self.recv_getUserLastSentMessageTimeStamp()

    def send_getUserLastSentMessageTimeStamp(self, mid):
        self._oprot.writeMessageBegin('getUserLastSentMessageTimeStamp', TMessageType.CALL, self._seqid)
        args = getUserLastSentMessageTimeStamp_args()
        args.mid = mid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserLastSentMessageTimeStamp(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserLastSentMessageTimeStamp_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserLastSentMessageTimeStamp failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["getUserStatus"] = Processor.process_getUserStatus
        self._processMap["updateProfileAttributeForChannel"] = Processor.process_updateProfileAttributeForChannel
        self._processMap["updateExtendedProfileAttribute"] = Processor.process_updateExtendedProfileAttribute
        self._processMap["getAllSimpleChannelContacts"] = Processor.process_getAllSimpleChannelContacts
        self._processMap["getUserIdentities"] = Processor.process_getUserIdentities
        self._processMap["markPaidCallAd"] = Processor.process_markPaidCallAd
        self._processMap["isGroupMember"] = Processor.process_isGroupMember
        self._processMap["getPhoneInfoFromPhoneNumber"] = Processor.process_getPhoneInfoFromPhoneNumber
        self._processMap["redeemPaidCallVoucher"] = Processor.process_redeemPaidCallVoucher
        self._processMap["getPreferredDisplayName"] = Processor.process_getPreferredDisplayName
        self._processMap["getContactsForChannel"] = Processor.process_getContactsForChannel
        self._processMap["getCallCreditProducts"] = Processor.process_getCallCreditProducts
        self._processMap["getCompactContacts"] = Processor.process_getCompactContacts
        self._processMap["notifyNotiCenterEvent"] = Processor.process_notifyNotiCenterEvent
        self._processMap["isInContact"] = Processor.process_isInContact
        self._processMap["lookupGroupMembers"] = Processor.process_lookupGroupMembers
        self._processMap["getRoomInformation"] = Processor.process_getRoomInformation
        self._processMap["getGroupCall"] = Processor.process_getGroupCall
        self._processMap["isAllowSecondaryDeviceLogin"] = Processor.process_isAllowSecondaryDeviceLogin
        self._processMap["getPrimaryClientForChannel"] = Processor.process_getPrimaryClientForChannel
        self._processMap["createRoomWithBuddy"] = Processor.process_createRoomWithBuddy
        self._processMap["getDisplayName"] = Processor.process_getDisplayName
        self._processMap["getPaidCallMetadata"] = Processor.process_getPaidCallMetadata
        self._processMap["getMid"] = Processor.process_getMid
        self._processMap["getUserCountryForBilling"] = Processor.process_getUserCountryForBilling
        self._processMap["getFavoriteGroupIdsForChannel"] = Processor.process_getFavoriteGroupIdsForChannel
        self._processMap["getPaidCallHistory"] = Processor.process_getPaidCallHistory
        self._processMap["sendPinCodeOperation"] = Processor.process_sendPinCodeOperation
        self._processMap["inviteIntoGroupCall"] = Processor.process_inviteIntoGroupCall
        self._processMap["getFriendMids"] = Processor.process_getFriendMids
        self._processMap["getMetaProfile"] = Processor.process_getMetaProfile
        self._processMap["sendMessageForChannel"] = Processor.process_sendMessageForChannel
        self._processMap["activeBuddySubscriberCount"] = Processor.process_activeBuddySubscriberCount
        self._processMap["getCallCreditPurchaseHistory"] = Processor.process_getCallCreditPurchaseHistory
        self._processMap["isRoomMember"] = Processor.process_isRoomMember
        self._processMap["sendSystemOAMessage"] = Processor.process_sendSystemOAMessage
        self._processMap["acquirePaidCallRoute"] = Processor.process_acquirePaidCallRoute
        self._processMap["getGroupsForChannel"] = Processor.process_getGroupsForChannel
        self._processMap["getUserCreateTime"] = Processor.process_getUserCreateTime
        self._processMap["registerChannelCP"] = Processor.process_registerChannelCP
        self._processMap["reserveCallCreditPurchase"] = Processor.process_reserveCallCreditPurchase
        self._processMap["acquirePaidCallCurrencyExchangeRate"] = Processor.process_acquirePaidCallCurrencyExchangeRate
        self._processMap["getRoomMemberMidsForAppPlatform"] = Processor.process_getRoomMemberMidsForAppPlatform
        self._processMap["getPaidCallBalanceList"] = Processor.process_getPaidCallBalanceList
        self._processMap["getPersonalInfos"] = Processor.process_getPersonalInfos
        self._processMap["getPrimaryClientsForChannel"] = Processor.process_getPrimaryClientsForChannel
        self._processMap["addBuddyToContact"] = Processor.process_addBuddyToContact
        self._processMap["getGroupMemberMidsForAppPlatform"] = Processor.process_getGroupMemberMidsForAppPlatform
        self._processMap["getUserLanguage"] = Processor.process_getUserLanguage
        self._processMap["lookupPaidCall"] = Processor.process_lookupPaidCall
        self._processMap["getExtendedProfile"] = Processor.process_getExtendedProfile
        self._processMap["getReverseCompactContacts"] = Processor.process_getReverseCompactContacts
        self._processMap["getPaidCallAdStatus"] = Processor.process_getPaidCallAdStatus
        self._processMap["findContactByUseridWithoutAbuseBlockForChannel"] = Processor.process_findContactByUseridWithoutAbuseBlockForChannel
        self._processMap["getGroupMemberMids"] = Processor.process_getG…